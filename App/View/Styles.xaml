<ResourceDictionary
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:conv="clr-namespace:WPFValueConverters"
  xmlns:global="clr-namespace:;assembly="
  xmlns:LAWPF="clr-namespace:LivingAgile.Common.WPF"
  xmlns:clr="clr-namespace:System;assembly=mscorlib"
  xmlns:mwt="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
  xmlns:View="clr-namespace:iTRAACv2.View"
>

  <Style x:Key="PrettyDataGridCellStyle" TargetType="DataGridCell" >
    <Style.Triggers>
      <!-- Highlight selected rows -->
      <Trigger Property="IsSelected" Value="True">
        <Setter Property="Background" Value="Lavender" />
        <Setter Property="BorderBrush" Value="Lavender" />
        <Setter Property="Foreground" Value="Black" />
      </Trigger>

      <!-- TODO: gut this generic overkill and toss this hyperlink column in the specific grids where it applies ... that's what i'm doing with SponsorGUID elsewhere (tabNewCustWiz) and it feels cleaner -->
      <DataTrigger Value="True">
        <DataTrigger.Binding>
          <Binding RelativeSource="{RelativeSource Mode=Self}" Path="Column.Header" Converter="{conv:BoolExpressionToBool}" ConverterParameter="'?' == 'Form #'" />
        </DataTrigger.Binding>
        <Setter Property="Template" >
          <Setter.Value>
            <ControlTemplate TargetType="DataGridCell" >
              <!-- TODO:3:this is just insane overkill and it seems like there should be a more elegant way but i've just spent waay too much time finding an alternative that looks right -->
              <!-- if you use <ContentPresenter /> rather than binding a textual element to the actual data, then you get blasé black text w/o the hyperlink styling -->
              <TextBlock Padding="4 3">
                <Hyperlink Command="{x:Static View:RoutedCommands.OpenTaxForm}" CommandParameter="{Binding Mode=OneWay, Path=TaxFormGUID}">
                  <Run>
                    <Run.Style>
                      <Style TargetType="Run">
                        <Style.Triggers>
                          <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="Red"/>
                          </Trigger>
                        </Style.Triggers>
                      </Style>
                    </Run.Style>
                    <Run.Text>
                      <MultiBinding Mode="OneWay" Converter="{conv:IndirectMultiValue}">
                        <Binding Mode="OneWay" />
                        <Binding RelativeSource="{RelativeSource Mode=TemplatedParent}" Path="Column.SortMemberPath" />
                       </MultiBinding>
                    </Run.Text>
                  </Run>
                </Hyperlink>
              </TextBlock>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </DataTrigger>

    </Style.Triggers>

    <!-- Add some padding around the contents of a cell -->
    <Setter Property="Padding" Value="4 3" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="DataGridCell">
          <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
            <ContentPresenter />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>


  <Style TargetType="DataGrid">

    <!-- Make the border and grid lines a little less imposing -->
    <Setter Property="BorderBrush" Value="#DDDDDD" />
    <Setter Property="HorizontalGridLinesBrush" Value="#DDDDDD" />
    <Setter Property="VerticalGridLinesBrush" Value="#DDDDDD" />

    <Setter Property="RowStyle">
      <Setter.Value>
        <Style TargetType="DataGridRow">
          <!-- Highlight a grid row as the mouse passes over -->
          <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
              <Setter Property="Background" Value="Lavender" />
            </Trigger>
          </Style.Triggers>
        </Style>
      </Setter.Value>
    </Setter>

    <Setter Property="CellStyle">
      <Setter.Value>
        <Style TargetType="DataGridCell" BasedOn="{StaticResource PrettyDataGridCellStyle}" />
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="DefaultDataGridCellStyle" TargetType="DataGridCell" BasedOn="{StaticResource {x:Type DataGridCell}}" />

  <Style x:Key="RightAlignTextBlockStyle" TargetType="{x:Type TextBlock}">
    <Setter Property="TextAlignment" Value="Right" />
  </Style>

  <clr:String x:Key="DateTimeFormat">{0:dd MMM yyyy hh:mm tt}</clr:String>
  <!-- nugget: Strings as static resources for Binding.StringFormat -->

  <Storyboard x:Key="PulsingOpacity" RepeatBehavior="Forever">
    <!-- Nugget: PulsingOpacity -->
    <DoubleAnimation Storyboard.TargetProperty="Opacity"
                     BeginTime="0:0:0" Duration="0:0:0.7"
							       From="1.0" To="0.5" 
                     RepeatBehavior="Forever" AutoReverse="True"/>
  </Storyboard>
  
  <!-- nugget: drawing the typical warning triangle with red border, yellow fill, black exclamation via XAML Geometry syntax so it can be reused in all it's resolution independent glory -->
  <DrawingImage x:Key="AlertIcon">
    <DrawingImage.Drawing>
      <DrawingGroup>
        <DrawingGroup.Children>
          <GeometryDrawing Geometry="M 1 0 L 2 2 0 2 Z" Brush="Yellow" >
            <GeometryDrawing.Pen>
              <Pen Thickness="0.3" LineJoin="Round" Brush="Red" />
            </GeometryDrawing.Pen>
          </GeometryDrawing>
          <GeometryDrawing Geometry="M 1 0.7 L 1 1.23 Z" >
            <GeometryDrawing.Pen>
              <Pen Thickness="0.3" LineJoin="Round" Brush="Black" />
            </GeometryDrawing.Pen>
          </GeometryDrawing>
          <GeometryDrawing Geometry="M 1 1.7 L 1 1.7 Z" >
            <GeometryDrawing.Pen>
              <Pen Thickness="0.3" LineJoin="Round" Brush="Black" />
            </GeometryDrawing.Pen>
          </GeometryDrawing>
        </DrawingGroup.Children>
      </DrawingGroup>
    </DrawingImage.Drawing>
  </DrawingImage>

  <DoubleAnimationUsingKeyFrames x:Key="UnDimOpacityAnim" BeginTime="00:00:00" Storyboard.TargetProperty="Opacity">
    <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
  </DoubleAnimationUsingKeyFrames>

  <DoubleAnimationUsingKeyFrames x:Key="DimOpacityAnim" BeginTime="00:00:00" Storyboard.TargetProperty="Opacity">
    <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0"/>
  </DoubleAnimationUsingKeyFrames>

  <DoubleAnimation x:Key="PulsingAnimation"
    BeginTime="0:0:0" Duration="0:0:0.7"
    From="1.0" To="0.5" 
    RepeatBehavior="Forever" AutoReverse="True"/>

  <ControlTemplate x:Key="InfoIcon">
    <Canvas SnapsToDevicePixels="True" Height="17" Width="16" HorizontalAlignment="Left" >
      <Canvas SnapsToDevicePixels="True" >
        <Ellipse Stroke="DarkGray" StrokeThickness="1" Width="15" Height="16"  />
      </Canvas>
      <Ellipse Stroke="LightGray" Width="13" Height="14" Canvas.Left="1" Canvas.Top="1" >
        <Ellipse.Fill>
          <LinearGradientBrush StartPoint="0,0" EndPoint="0,0.75">
            <GradientStop Color="#ddddff" Offset="0" />
            <GradientStop Color="#2390FF" Offset=".8" />
          </LinearGradientBrush>
        </Ellipse.Fill>
      </Ellipse>
      <TextBlock SnapsToDevicePixels="True" Text="i" Margin="5.5,0,0,0" Foreground="White" FontWeight="Bold" Height="12" />
    </Canvas>
  </ControlTemplate>

  <SolidColorBrush x:Key="MainBackgroundBrush" Color="#F4F7FC" />
  <SolidColorBrush x:Key="PopUpBackgroundBrush" Color="LightGoldenrodYellow" />

  <LinearGradientBrush x:Key="GreenGradient_H" StartPoint="0,0" EndPoint="1,0">
    <GradientStop Color="#93F75E" Offset="0.0" />
    <GradientStop Color="#F4FCF4" Offset="1.0" />
  </LinearGradientBrush>

  <LinearGradientBrush x:Key="GreyGradient" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Color="#f4f4f4" Offset="0.0" />
    <GradientStop Color="#cccccc" Offset="1.0" />
  </LinearGradientBrush>

  <LinearGradientBrush x:Key="OrangeGradient" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Color="#F7F0AB" Offset="0.0"/>
    <GradientStop Color="#CD8F00" Offset="1.0"/>
  </LinearGradientBrush>

  <LinearGradientBrush x:Key="LightBlueGradient" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Offset="0.0" Color="#E6F5FC"/>
    <GradientStop Offset="1.0" Color="#92CAE6"/>
  </LinearGradientBrush>

  <LinearGradientBrush x:Key="LightRedGradient" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Offset="0.0" Color="Pink"/>
    <GradientStop Offset="1.0" Color="Red"/>
  </LinearGradientBrush>


  <ContextMenu x:Key="WPFDataGrid_CopyMenu">
    <MenuItem Header="Copy Cell" ></MenuItem>
    <MenuItem Header="Copy Row(s)" Command="Copy"></MenuItem>
  </ContextMenu>

  <Style TargetType="Border" x:Key="FatLabel">
    <Setter Property="CornerRadius" Value="10" />
    <Setter Property="Background" Value="LightGoldenrodYellow" />
    <Setter Property="Margin" Value="3 2" />
    <Setter Property="Padding" Value="6 3 6 5" />
    <Setter Property="BorderThickness" Value="2" />
    <Setter Property="BorderBrush" Value="LightGray" />
    <Style.Resources>
      <Style TargetType="TextBlock">
        <Setter Property="FontSize" Value="14" />
      </Style>
      <Style TargetType="RadioButton">
        <Setter Property="FontSize" Value="14" />
        <Setter Property="VerticalAlignment" Value="Center" />
      </Style>
    </Style.Resources>
  </Style>

  <Style TargetType="{x:Type Button}">
    <Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
    <Setter Property="Background" Value="{StaticResource GreyGradient}" />
    <Setter Property="Padding" Value="2,0,2,1" />
    <Setter Property="VerticalAlignment" Value="Center" />
  </Style>

  <Style TargetType="{x:Type ToggleButton}">
    <Setter Property="Background" Value="{StaticResource GreyGradient}" />
    <Setter Property="VerticalAlignment" Value="Center" />
  </Style>

  <Style TargetType="{x:Type GroupBox}">
    <Setter Property="HeaderTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock Text="{TemplateBinding Content}" FontSize="12pt" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="SmallGroup" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource {x:Type GroupBox}}">
    <Setter Property="HeaderTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock Text="{TemplateBinding Content}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="ToolBar">
    <Setter Property="Background" Value="{StaticResource GreyGradient}" />
    <!-- nugget: styles for _NESTED_ controls ala CSS -->
    <Style.Resources>
      <Style TargetType="StackPanel">
        <Setter Property="Orientation" Value="Horizontal" />
      </Style>
    </Style.Resources>
  </Style>

  
  <Style x:Key="DimButton" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
    <Setter Property="Opacity" Value="0" />
    <Style.Triggers>
      <EventTrigger RoutedEvent="Mouse.MouseEnter">
        <BeginStoryboard>
          <Storyboard Storyboard.TargetProperty="Opacity">
            <StaticResourceExtension ResourceKey="UnDimOpacityAnim"/>
          </Storyboard>
        </BeginStoryboard>
      </EventTrigger>
      <EventTrigger RoutedEvent="Mouse.MouseLeave">
        <BeginStoryboard>
          <Storyboard Storyboard.TargetProperty="Opacity">
            <!-- nugget: the crazy unintuitive syntax to reuse an Animation as a StaticResource: http://social.msdn.microsoft.com/Forums/en-US/wpf/thread/9e769c38-3898-4cb3-88ca-b506f3b4fa36/-->
            <StaticResourceExtension ResourceKey="DimOpacityAnim"/>
          </Storyboard>
        </BeginStoryboard>
      </EventTrigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="DimFlatButton" TargetType="Button" BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}">
    <Setter Property="Opacity" Value="0" />
    <Style.Triggers>
      <EventTrigger RoutedEvent="Mouse.MouseEnter">
        <BeginStoryboard>
          <Storyboard Storyboard.TargetProperty="Opacity">
            <StaticResourceExtension ResourceKey="UnDimOpacityAnim"/>
          </Storyboard>
        </BeginStoryboard>
      </EventTrigger>
      <EventTrigger RoutedEvent="Mouse.MouseLeave">
        <BeginStoryboard>
          <Storyboard Storyboard.TargetProperty="Opacity">
            <!-- nugget: the crazy unintuitive syntax to reuse an Animation as a StaticResource: http://social.msdn.microsoft.com/Forums/en-US/wpf/thread/9e769c38-3898-4cb3-88ca-b506f3b4fa36/-->
            <StaticResourceExtension ResourceKey="DimOpacityAnim"/>
          </Storyboard>
        </BeginStoryboard>
      </EventTrigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="LinkButton" TargetType="Button">
    <Setter Property="VerticalAlignment" Value="Center"/>
    <Setter Property="HorizontalAlignment" Value="Center"/>
    <Setter Property="Cursor" Value="Hand"/>
    <Setter Property="Foreground" Value="Blue"/>
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <TextBlock TextDecorations="Underline" 
                    Text="{TemplateBinding Content}"
                    Background="{TemplateBinding Background}"/>
          <ControlTemplate.Triggers>
            <Trigger Property="IsPressed" Value="True">
              <Setter Property="Foreground" Value="Red"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- this is what makes the ToolTip pop for a DataGridXXXColumn which sets ToolTipService.ToolTip="xyz" e.g. tabSponsor.xaml -> gridDependents -->
  <Style TargetType="{x:Type DataGridColumnHeader}">
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="ToolTip" Value="{Binding Column.(ToolTipService.ToolTip), RelativeSource={RelativeSource Self}}"/>
      </Trigger>
    </Style.Triggers>
  </Style>


  <!-- this makes the nested ToggleButton in ucToggleButton look like the rest of the toolbar buttons (i.e. the "flat" style with no grey button chrome) 
       it should probably be implementable as a trigger of some sort but not worth the trouble of wasting any more time here vs other priorities -->
  <Style x:Key="FlatToggleButton" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource ResourceKey={x:Static ToolBar.ToggleButtonStyleKey}}">
    <Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
  </Style>
  <Style x:Key="FlatButton" TargetType="{x:Type Button}" BasedOn="{StaticResource ResourceKey={x:Static ToolBar.ButtonStyleKey}}">
    <Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
  </Style>
  <Style x:Key="PrettyFlatButton" TargetType="{x:Type Button}" BasedOn="{StaticResource FlatButton}">
    <Setter Property="BorderBrush" Value="Silver" />
    <Setter Property="Background" Value="#efefef" />
    <Style.Resources>
      <Style TargetType="Border">
        <Setter Property="CornerRadius" Value="4" />
      </Style>
      <Style TargetType="ContentPresenter">
        <Setter Property="Margin" Value="2,1,2,2" />
      </Style>
    </Style.Resources>
  </Style>
  <Style x:Key="FlatSeparator" TargetType="{x:Type Separator}" BasedOn="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}">
    <Setter Property="Margin" Value="2,0" />
    <Setter Property="Width" Value="1" />
  </Style>

  <!-- style used on text in status bar to show elipses (...) when text is cut off -->
  <!-- Style TargetType="TextBlock" x:Key="StatusBarTextBlock">
    <Setter Property="TextWrapping" Value="NoWrap" />
    <Setter Property="TextTrimming" Value="CharacterEllipsis" />
    <Setter Property="Padding" Value="2,0" />
  </Style-->

  <Style x:Key="CanDisableNestedImage" TargetType="{x:Type Image}">
    <Style.Triggers>
      <DataTrigger Binding="{Binding Mode=OneWay, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ButtonBase}, Path=IsEnabled}" Value="False">
        <Setter Property="Opacity" Value="0.50" />
      </DataTrigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="LargeTabItem" TargetType="{x:Type TabItem}">
    <Setter Property="HeaderTemplate">
      <Setter.Value>
        <DataTemplate>
          <ContentPresenter>
            <ContentPresenter.Content>
              <TextBlock FontSize="15" Text="{TemplateBinding Content}"/>
            </ContentPresenter.Content>
          </ContentPresenter>
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- nugget: setting the style of *only* the Validation.HasError ToolTip took forever to find!!!  -->
  <!-- nugget: Path=PlacementTarget was the key!!!, see usage of ErrorToolTip further down -->
  <!-- nugget: found here: http://social.msdn.microsoft.com/Forums/en-US/wpf/thread/10d2ecbf-9e6e-4414-b57e-79dd02e0944e -->
  <ToolTip x:Key="ErrorToolTip" Background="Red" Foreground="White" DataContext="{Binding Path=PlacementTarget, RelativeSource={RelativeSource Self}}">
    <TextBlock Text="{Binding Mode=OneWay, Path=(Validation.Errors).CurrentItem.ErrorContent}" Padding="2,3,2,2" FontSize="14" />

    <!--StackPanel Orientation="Horizontal">
      <Border Background="Red" DockPanel.Dock="Right" CornerRadius="5">
        <TextBlock Text="!" VerticalAlignment="Center" HorizontalAlignment="Center" FontWeight="Bold" Foreground="White" />
      </Border>
      <TextBlock Background="Red" Foreground="White" Padding="5" VerticalAlignment="Center" Text="{Binding Path=(Validation.Errors).CurrentItem.ErrorContent}"  />
    </StackPanel-->
  </ToolTip>



  <Style TargetType="FrameworkElement" x:Key="ValidationErrorTemplate">

    <!-- nugget: good error validation template ref: http://wpfglue.wordpress.com/2009/12/16/using-validation-errortemplate/ -->
    <!-- keep following code around in case we want to go the direction of using the Adornment layer versus the ToolTip -->
    <!--Setter Property="Validation.ErrorTemplate">
      <Setter.Value>
        <ControlTemplate>
          <DockPanel LastChildFill="True" >
            <Border Background="Red" DockPanel.Dock="Right" Margin="5,0,0,0" Width="20" Height="20" CornerRadius="10">
              <TextBlock Text="!" VerticalAlignment="Center" HorizontalAlignment="Center" FontWeight="Bold" Foreground="White" />
            </Border>
            <Border BorderBrush="Red" BorderThickness="1">
              <AdornedElementPlaceholder VerticalAlignment="Center" />
            </Border>
          </DockPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter-->

    <Setter Property="Validation.ErrorTemplate">
      <Setter.Value>
        <ControlTemplate>
          <Border BorderBrush="Red" BorderThickness="1">
            <AdornedElementPlaceholder VerticalAlignment="Center" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>

    <!--Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/-->

    <!-- nugget: better to set the control's actual ToolTip rather than putting tooltip somewhere in the Validation.ErrorTemplate because then the ToolTip comes up no matter where you mouse into the control, otherwise it's more finicky where you have to put the mouse to get the text to popup -->
    <Style.Triggers>
      <Trigger Property="Validation.HasError" Value="True">
        <Setter Property="ToolTip" Value="{StaticResource ErrorToolTip}" />
        <!--Setter Property="Background" Value="MistyRose" /-->

        <!--Setter Property="Validation.ErrorTemplate">
          <Setter.Value>
            <ControlTemplate>
              <Border BorderBrush="Red" BorderThickness="1">
                <AdornedElementPlaceholder VerticalAlignment="Center" />
              </Border>
            </ControlTemplate>
          </Setter.Value>
        </Setter-->


        <!-- the following code was pretty neat looking... highlight invalid fields with a light red background, then *animate* the color back to white when a valid value has been entered entered -->
        <!-- Setter Property="Background" Value="White" /-->
        <!-- Setter Property="Validation.ErrorTemplate" Value="{x:Null}" /-->
        <!--Trigger.EnterActions>
          <BeginStoryboard>
            <Storyboard TargetProperty="Background.Color">
              <ColorAnimation From="White" To="LavenderBlush" Duration="0:0:0.25" AutoReverse="False"/>
            </Storyboard>
          </BeginStoryboard>
        </Trigger.EnterActions>
        <Trigger.ExitActions>
          <BeginStoryboard>
            <Storyboard TargetProperty="Background.Color">
              <ColorAnimation From="LavenderBlush" To="White" Duration="0:0:0.25" AutoReverse="False"/>
            </Storyboard>
          </BeginStoryboard>
        </Trigger.ExitActions-->
      </Trigger>
    </Style.Triggers>

  </Style>

  <Style TargetType="View:UcTextBoxWatermarked" BasedOn="{StaticResource ValidationErrorTemplate}"/>
  <Style TargetType="TextBlock" BasedOn="{StaticResource ValidationErrorTemplate}"/>
  <Style TargetType="StackPanel" BasedOn="{StaticResource ValidationErrorTemplate}"/>

  <Style TargetType="TextBox" BasedOn="{StaticResource ValidationErrorTemplate}">
    <Style.Triggers>
      <Trigger Property="IsReadOnly" Value="True" >
        <Setter Property="Background" Value="#eeeeee"/>
        <Setter Property="IsTabStop" Value="False"/>
      </Trigger>
    </Style.Triggers>
    
    <Setter Property="VerticalAlignment" Value="Center" />
  </Style>

  <Style x:Key="SelectOnFocusTextBox" TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
    <Setter Property="LAWPF:StylizedBehaviors.Behaviors">
      <Setter.Value>
        <LAWPF:StylizedBehaviorCollection>
          <global:SelectAllTextOnFocusBehavior />
        </LAWPF:StylizedBehaviorCollection>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- there is the Vendor popup scenario where there's a read only display field that still requires to be filled out to be valid -->
  <Style x:Key="ReadOnlyTextBox" TargetType="TextBox" BasedOn="{StaticResource ValidationErrorTemplate}">
    <Setter Property="Background" Value="#eeeeee"/>
    <Setter Property="IsTabStop" Value="False"/>
    <Setter Property="IsReadOnly" Value="True" />
    <Setter Property="VerticalAlignment" Value="Center"/>
  </Style>

  <Style TargetType="CheckBox" BasedOn="{StaticResource ValidationErrorTemplate}">
    <Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
  </Style>

  <Style x:Key="RedXCheckBox" TargetType="CheckBox" BasedOn="{StaticResource {x:Type CheckBox}}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type CheckBox}">
          <Image Name="img" Source="/Assets/Glyphs/blank_x22.png" DockPanel.Dock="Left" Stretch="UniformToFill"
                  Height="24" Width="24" UseLayoutRounding="True"
                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="Center" />
          <ControlTemplate.Triggers>
            <!--Trigger Property="IsChecked" Value="True">
              <Setter TargetName="img" Property="Source" Value="/Assets/Glyphs/check_green_x22.png"/>
            </Trigger-->
            <Trigger Property="IsChecked" Value="False">
              <Setter TargetName="img" Property="Source" Value="/Assets/Glyphs/red_x_x24.png"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ExclamationCheckBox" TargetType="CheckBox" BasedOn="{StaticResource {x:Type CheckBox}}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type CheckBox}">
          <Image Name="img" Source="/Assets/Glyphs/blank_x22.png" DockPanel.Dock="Left" Stretch="UniformToFill"
                  Height="auto" Width="auto" UseLayoutRounding="True"
                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="Center" />
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="img" Property="Source" Value="{StaticResource AlertIcon}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="ComboBox" BasedOn="{StaticResource ValidationErrorTemplate}">
    <Setter Property="Padding" Value="4,2,2,3" />
    <Setter Property="VerticalAlignment" Value="Center" />
  </Style>

  <Style TargetType="DatePicker" BasedOn="{StaticResource ValidationErrorTemplate}" />

  <Style x:Key="RadioButtonList" TargetType="{x:Type ListBox}">
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <VirtualizingStackPanel Background="Transparent" Orientation="Vertical"/>
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemContainerStyle">
      <Setter.Value>
        <Style TargetType="{x:Type ListBoxItem}" >
          <Setter Property="Margin" Value="5" />
          <Setter Property="Template">
            <Setter.Value>
              <ControlTemplate TargetType="{x:Type ListBoxItem}">
                <Border BorderThickness="0" Background="Transparent">
                  <RadioButton Focusable="False"
                               IsHitTestVisible="False"
				                       IsChecked="{TemplateBinding IsSelected}">
                    <ContentPresenter />
                  </RadioButton>
                </Border>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
        </Style>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBox}">
          <Border BorderThickness="0" Padding="0" BorderBrush="Transparent" Background="Transparent" Name="Bd" SnapsToDevicePixels="True">
            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- Expander Brushes -->
  <LinearGradientBrush x:Key="Expander_NormalBrush" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Color="#202020" Offset="0.0"/>
    <GradientStop Color="#444444" Offset="1.0"/>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="Expander_NormalBorderBrush" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Color="#909090" Offset="0.0"/>
    <GradientStop Color="#303030" Offset="1.0"/>
  </LinearGradientBrush>
  <SolidColorBrush x:Key="Expander_GlyphBrush" Color="Black" />
  <LinearGradientBrush x:Key="HoverBrush" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Color="#404040" Offset="0.0"/>
    <GradientStop Color="#606060" Offset="1.0"/>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="Expander_PressedBrush" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Color="#202020" Offset="0.0"/>
    <GradientStop Color="#404040" Offset="0.1"/>
    <GradientStop Color="#707070" Offset="0.9"/>
    <GradientStop Color="#808080" Offset="1.0"/>
  </LinearGradientBrush>
  <SolidColorBrush x:Key="Expander_ForegroundBrush" Color="Black" />
  <LinearGradientBrush x:Key="HeaderBrush" EndPoint="0,0" StartPoint="0,1">
    <GradientStop Color="#98B4D2" Offset="0"/>
    <GradientStop Color="#ECF5FC" Offset="1"/>
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="Expander_OpenHeaderBorderBrush" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Color="#C0C0C0" Offset="0.0"/>
    <GradientStop Color="#808080" Offset="1.0"/>
  </LinearGradientBrush>
  <SolidColorBrush x:Key="Expander_GroupBackgroundBrush" Color="#585858"/>
  <SolidColorBrush x:Key="Expander_OpenGroupBorderBrush" Color="#808080"/>
  <SolidColorBrush x:Key="Expander_DisabledBackgroundBrush" Color="#404040" />
  <SolidColorBrush x:Key="Expander_DisabledBorderBrush" Color="#606060" />
  <SolidColorBrush x:Key="Expander_DisabledForegroundBrush" Color="#808080" />

  <!-- Expander toogle button template -->
  <ControlTemplate x:Key="ExpanderToggleButton" TargetType="ToggleButton">
    <Border
        Name="Border"
        CornerRadius="20"
        Margin="2,4" 
        Background="Transparent"
        BorderBrush="{StaticResource Expander_NormalBorderBrush}"
        BorderThickness="1"
        >
      <Path
        Name="Arrow"
        Fill="{StaticResource Expander_GlyphBrush}"
        HorizontalAlignment="Center"
        VerticalAlignment="Center"
        Data="M 0 0 L 4 4 L 8 0 Z"/>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="ToggleButton.IsMouseOver" Value="true">
        <Setter TargetName="Border" Property="Background"
                  Value="{StaticResource HoverBrush}" />
      </Trigger>
      <Trigger Property="IsPressed" Value="true">
        <Setter TargetName="Border" Property="Background"
                  Value="{StaticResource Expander_PressedBrush}" />
      </Trigger>
      <Trigger Property="IsChecked" Value="true">
        <Setter TargetName="Arrow" Property="Data"
                  Value="M 0 4 L 4 0 L 8 4 Z" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="Border" Property="Background"
                  Value="{StaticResource Expander_DisabledBackgroundBrush}" />
        <Setter TargetName="Border" Property="BorderBrush"
                  Value="{StaticResource Expander_DisabledBorderBrush}" />
        <Setter Property="Foreground"
                  Value="{StaticResource Expander_DisabledForegroundBrush}"/>
        <Setter TargetName="Arrow" Property="Fill"
                  Value="{StaticResource Expander_DisabledForegroundBrush}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <!-- Expander style -->
  <Style TargetType="Expander">
    <Setter Property="Foreground" Value="{StaticResource Expander_ForegroundBrush}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Expander">
          <Grid>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto"/>
              <RowDefinition Name="ContentRow" Height="0"/>
            </Grid.RowDefinitions>
            <Border 
                Name="Border" 
                Grid.Row="0" 
                Background="{StaticResource HeaderBrush}"
                BorderBrush="{StaticResource Expander_NormalBorderBrush}"
                BorderThickness="1" 
                CornerRadius="4,4,0,0" >
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="*" />
                  <ColumnDefinition Width="20" />
                </Grid.ColumnDefinitions>
                <ToggleButton
                    Grid.Column="1"
                    IsChecked="{Binding Path=IsExpanded, Mode=TwoWay,
                                        RelativeSource={RelativeSource TemplatedParent}}"
                    OverridesDefaultStyle="True" 
                    Template="{StaticResource ExpanderToggleButton}" 
                    Background="{StaticResource Expander_NormalBrush}" />
                <ContentPresenter 
                    Grid.Column="0"
                    Margin="4" 
                    ContentSource="Header" 
                    RecognizesAccessKey="True" />
              </Grid>
            </Border>
            <Border 
                Name="Content" 
                Grid.Row="1" 
                BorderBrush="Gray" 
                BorderThickness="1,0,1,1" 
                CornerRadius="0,0,4,4" >
              <ContentPresenter Margin="4" />
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="True">
              <Setter TargetName="ContentRow" Property="Height"
                        Value="{Binding ElementName=Content, Path=Height}" />
              <Setter TargetName="Border" Property="BorderBrush"
                        Value="{StaticResource Expander_OpenHeaderBorderBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Border" Property="Background"
                        Value="{StaticResource Expander_DisabledBackgroundBrush}" />
              <Setter TargetName="Border" Property="BorderBrush"
                        Value="{StaticResource Expander_DisabledBorderBrush}" />
              <Setter Property="Foreground"
                        Value="{StaticResource Expander_DisabledForegroundBrush}"/>
            </Trigger>

          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--VisualBrush x:Key="VoidWatermark2" TileMode="Tile" Opacity="20" ViewportUnits="Absolute" Viewport="0, 0, 200, 200" >
    <VisualBrush.Visual>
      <TextBlock Text="VOID" Opacity="0.03" FontWeight="DemiBold" Foreground="Black" >
          <TextBlock.RenderTransform>
            <TransformGroup>
                <SkewTransform AngleX="30" />
                <RotateTransform Angle="-30"/>
              </TransformGroup>
          </TextBlock.RenderTransform>
      </TextBlock>
    </VisualBrush.Visual>
  </VisualBrush>

  <VisualBrush x:Key="VoidWatermark" TileMode="Tile" Opacity="20" ViewportUnits="Absolute" Viewport="0, 0, 200, 200"  >
    <VisualBrush.Visual>
      <TextEffects:TextPath Stroke="Black" StrokeThickness="0.08" Text="VOID" Opacity="0.09" Margin="50" Fill="LightGray" FontWeight="Bold">
        <TextEffects:TextPath.RenderTransform>
          <TransformGroup>
            <SkewTransform AngleX="30" />
            <RotateTransform Angle="-30"/>
          </TransformGroup>
        </TextEffects:TextPath.RenderTransform>
      </TextEffects:TextPath>
    </VisualBrush.Visual>
  </VisualBrush-->

  <Style TargetType="ToggleButton" x:Key="ToggleButton_NoRenderPressed" >
    <!-- nugget: copied the whole ToggleButton style via "StyleSnooper": http://arbel.net/2006/11/05/revamped-style-snooper/ -->
    <Style.BasedOn>
      <Style TargetType="{x:Type ButtonBase}">
        <Style.Resources>
          <ResourceDictionary />
        </Style.Resources>
        <Setter Property="FrameworkElement.FocusVisualStyle">
          <Setter.Value>
            <Style TargetType="{x:Type IFrameworkInputElement}">
              <Style.Resources>
                <ResourceDictionary />
              </Style.Resources>
              <Setter Property="Control.Template">
                <Setter.Value>
                  <ControlTemplate>
                    <Rectangle Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2" Margin="2,2,2,2" SnapsToDevicePixels="True" />
                  </ControlTemplate>
                </Setter.Value>
              </Setter>
            </Style>
          </Setter.Value>
        </Setter>
        <Setter Property="Panel.Background">
          <Setter.Value>
            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
              <LinearGradientBrush.GradientStops>
                <GradientStop Color="#FFF3F3F3" Offset="0" />
                <GradientStop Color="#FFEBEBEB" Offset="0.5" />
                <GradientStop Color="#FFDDDDDD" Offset="0.5" />
                <GradientStop Color="#FFCDCDCD" Offset="1" />
              </LinearGradientBrush.GradientStops>
            </LinearGradientBrush>
          </Setter.Value>
        </Setter>
        <Setter Property="Border.BorderBrush">
          <Setter.Value>
            <SolidColorBrush>
              #FF707070</SolidColorBrush>
          </Setter.Value>
        </Setter>
        <Setter Property="Border.BorderThickness">
          <Setter.Value>
            <Thickness>
              1,1,1,1</Thickness>
          </Setter.Value>
        </Setter>
        <Setter Property="TextElement.Foreground">
          <Setter.Value>
            <DynamicResource ResourceKey="{x:Static SystemColors.ControlTextBrushKey}" />
          </Setter.Value>
        </Setter>
        <Setter Property="Control.HorizontalContentAlignment">
          <Setter.Value>
            <x:Static Member="HorizontalAlignment.Center" />
          </Setter.Value>
        </Setter>
        <Setter Property="Control.VerticalContentAlignment">
          <Setter.Value>
            <x:Static Member="VerticalAlignment.Center" />
          </Setter.Value>
        </Setter>
        <Setter Property="Control.Padding">
          <Setter.Value>
            <Thickness>
              1,1,1,1</Thickness>
          </Setter.Value>
        </Setter>
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ButtonBase}">
              <mwt:ButtonChrome Background="{TemplateBinding Panel.Background}" BorderBrush="{TemplateBinding Border.BorderBrush}" RenderDefaulted="{TemplateBinding Button.IsDefaulted}" RenderMouseOver="{TemplateBinding UIElement.IsMouseOver}" RenderPressed="{TemplateBinding ButtonBase.IsPressed}" Name="Chrome" SnapsToDevicePixels="True">
                <ContentPresenter RecognizesAccessKey="True" Content="{TemplateBinding ContentControl.Content}" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}" Margin="{TemplateBinding Control.Padding}" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
              </mwt:ButtonChrome>
              <ControlTemplate.Triggers>
                <Trigger Property="UIElement.IsKeyboardFocused">
                  <Setter Property="mwt:ButtonChrome.RenderDefaulted" TargetName="Chrome">
                    <Setter.Value>
                      <clr:Boolean>
                        True</clr:Boolean>
                    </Setter.Value>
                  </Setter>
                  <Trigger.Value>
                    <clr:Boolean>
                      True</clr:Boolean>
                  </Trigger.Value>
                </Trigger>
                <!--Trigger Property="ToggleButton.IsChecked">
                  <Setter Property="mwt:ButtonChrome.RenderPressed" TargetName="Chrome">
                    <Setter.Value>
                      <clr:Boolean>
                        True</clr:Boolean>
                    </Setter.Value>
                  </Setter>
                  <Trigger.Value>
                    <clr:Boolean>
                      True</clr:Boolean>
                  </Trigger.Value>
                </Trigger-->
                <Trigger Property="UIElement.IsEnabled">
                  <Setter Property="TextElement.Foreground">
                    <Setter.Value>
                      <SolidColorBrush>
                        #FFADADAD</SolidColorBrush>
                    </Setter.Value>
                  </Setter>
                  <Trigger.Value>
                    <clr:Boolean>
                      False</clr:Boolean>
                  </Trigger.Value>
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
    </Style.BasedOn>
    <Style.Resources>
      <ResourceDictionary />
    </Style.Resources>
  </Style>

  <Style x:Key="DistractingToggleButton" TargetType="ToggleButton" BasedOn="{StaticResource ToggleButton_NoRenderPressed}">
    <Style.Triggers>
      <Trigger Property="IsChecked" Value="True">
        <Setter Property="Background" Value="{StaticResource LightRedGradient}">
        </Setter>
        <Setter Property="LayoutTransform">
          <Setter.Value>
            <RotateTransform Angle="-20" />
          </Setter.Value>
        </Setter>
        <Setter Property="FontWeight" Value="Black" />
        <Setter Property="FontSize" Value="12pt" />
      </Trigger>
    </Style.Triggers>
  </Style>


</ResourceDictionary>