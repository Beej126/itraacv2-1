<View:TabBase x:Class="iTRAACv2.View.TabTaxForm"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:conv="clr-namespace:WPFValueConverters"
  xmlns:Model="clr-namespace:iTRAACv2.Model"
  xmlns:View="clr-namespace:iTRAACv2.View" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
              xmlns:d="http://schemas.microsoft.com/expression/blend/2008" mc:Ignorable="d">

  <!-- nugget: when debugging complex databindings, the diagnostics namespace definition below allows for the following attribute to be specified on any XAML element, verbose binding errors are then displayed in the Visual Studio "Output" window, it's very effective -->
  <!-- xmlns:diagnostics="clr-namespace:System.Diagnostics;assembly=WindowsBase" -->
  <!-- diagnostics:PresentationTraceSources.TraceLevel="High" -->

  <!-- nugget: Typical controls like TextBox are set UpdateSourceTrigger = LostFocus by default.
                     That means entering a value and hitting save w/o tabbing out of the field first will get lost.
                     Therefore make sure to set all entry field {Bindings UpdateSourceTrigger=PropertyChanged} -->

  <View:TabBase.Resources>

    <LinearGradientBrush x:Key="TabBackground" StartPoint="0,0" EndPoint="0,1">
      <GradientStop Color="#ACF990" Offset="0.0"/>
      <GradientStop Color="#68CE40" Offset="1.0"/>
    </LinearGradientBrush>

  </View:TabBase.Resources>

  <Grid>
    <Grid.RowDefinitions>
      <RowDefinition Height="Auto" />
      <RowDefinition Height="*" />
    </Grid.RowDefinitions>

    <Grid.Resources>
      <Style TargetType="{x:Type StackPanel}">
        <Setter Property="Orientation" Value="Horizontal"/>
      </Style>
      <Style TargetType="{x:Type Label}">
        <Setter Property="HorizontalAlignment" Value="Right"/>
      </Style>
    </Grid.Resources>

    <ToolBar Grid.Row="0" Margin="0 0 0 10">
      <Button Name="btnSave" Click="BtnSaveClick" IsEnabled="{Binding Mode=OneWay, Path=IsModified}">
        <StackPanel>
          <Image Source="/Assets/Glyphs/save.png" Style="{StaticResource CanDisableNestedImage}" />
          <Label Content="Save" />
        </StackPanel>
      </Button>
      <Button Name="btnSaveClose" Click="BtnSaveCloseClick" IsEnabled="{Binding Mode=OneWay, Path=IsModified}">
        <StackPanel>
          <Image Source="/Assets/Glyphs/save_close.png" Style="{StaticResource CanDisableNestedImage}" />
          <Label Content="Save &amp; Close" />
        </StackPanel>
      </Button>
      <Button Click="BtnOpenPrintClick" IsEnabled="{Binding Mode=OneWay, Path=IsLocked, Converter={conv:InverseBooleanConverter}}">
        <StackPanel Orientation="Vertical">
          <StackPanel>
            <Image Source="/Assets/Glyphs/print.png" Style="{StaticResource CanDisableNestedImage}" />
            <Label Content="Print" />
          </StackPanel>
          <Popup AllowsTransparency="True" Name="popPrint" StaysOpen="False">
            <Border BorderThickness="1" BorderBrush="DarkGray" Background="{StaticResource PopUpBackgroundBrush}" Padding="15" CornerRadius="10">
              <StackPanel Orientation="Vertical">
                <TextBlock Text="Reason:" />
                <RadioButton Content="Administrative" GroupName="ReprintReason" />
                <RadioButton Name="rdoReprintForCust" Content="Customer" GroupName="ReprintReason" Margin="0,3,0,7" />
                <CheckBox Name="chkPrintPO" Content="Purchase Order" 
                          IsChecked="{Binding Mode=OneWay, Path=Fields[InitPrt215], Converter={conv:EmptyToTrue}}"
                          Checked="PrintPoChecked" />
                <CheckBox Name="chkPrintAbw" Content="Abwicklungsschein" IsChecked="{Binding Mode=OneWay, Path=Fields[InitPrtAbw], Converter={conv:EmptyToTrue}}"
                          Checked="PrintAbwChecked" />
                <StackPanel Margin="0,5,0,5">
                  <Button Content="Print" Margin="0,0,2,0" Click="BtnConfirmPrintClick" />
                  <Button Content="Cancel" Margin="2,0,0,0" Click="BtnCancelPrintClick" />
                </StackPanel>
              </StackPanel>
            </Border>
          </Popup>
        </StackPanel>
      </Button>
      <Button ToolTip="Reload Tax Form from Database" Name="btnReload" Click="BtnReloadClick" >
        <StackPanel>
          <Image Source="/Assets/Glyphs/refresh.png" Style="{StaticResource CanDisableNestedImage}" />
          <Label Content="Reload" />
        </StackPanel>
      </Button>
      <View:UcToggleButtonLock
        ToggleButtonStyle="{StaticResource FlatToggleButton}"
        ImageStyle="{StaticResource CanDisableNestedImage}"
        Text="{Binding Mode=OneWay, Path=Fields[Status]}"
        IsChecked="{Binding Mode=TwoWay, Path=IsLocked, Converter={conv:InverseBooleanConverter}}"
        IsEnabled="{Binding Mode=OneWay, Path=Access.HasUnlockForm, Source={x:Static Model:UserModel.Current}}" >
        <View:UcToggleButtonLock.ToolTip>
          <MultiBinding Converter="{View:LockToolTipConverter}" Mode="OneWay" >
            <Binding Mode="OneWay" Path="IsLocked" />
            <Binding Mode="OneWay" Source="{x:Static Model:UserModel.Current}" Path="Access.HasUnlockForm"  />
            <Binding Mode="OneWay" Path="Fields[StatusFlags]" />
          </MultiBinding>
        </View:UcToggleButtonLock.ToolTip>
      </View:UcToggleButtonLock>

    </ToolBar>


    <Grid Grid.Row="1" >
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="2*" />
        <ColumnDefinition Width="Auto" />
        <ColumnDefinition />
      </Grid.ColumnDefinitions>

      <GridSplitter Grid.Column="1" Width="5" Height="auto" ResizeBehavior="PreviousAndNext" Background="Transparent" />

      <GroupBox Style="{x:Null}" Grid.Column="2">
        <GroupBox.Header>
          <StackPanel Orientation="Horizontal">
            <TextBlock Text="Remarks" VerticalAlignment="Center" Margin="0,0,5,0" FontSize="16" />
            <Button Content="Add Entry" Padding="3,2" Margin="3" />
            <CheckBox Content="Show Deleted" VerticalAlignment="Center" Margin="10,0,0,0"
                      IsChecked="{Binding Mode=TwoWay, Path=ShowDeletedRemarks}"/>
          </StackPanel>
        </GroupBox.Header>


        <DataGrid Name="gridRemarks" IsReadOnly="True" CanUserAddRows="False"
                  ItemsSource="{Binding Path=TaxFormRemarks}"
                  BeginningEdit="GridRemarksBeginningEdit" >
          <!-- nugget: initally used "Fields.DataView/TaxForm_Remark" DataRelation master-detail binding syntax, somehow it retains the current DataRowView context even though we path up to the entire DataView???-->
          <!-- nugget: but unfortunately, that approach isn't connected when the child rowset is initially empty and subsequently populated, rats, it looked kind of slick -->
          <DataGrid.Columns>
            <DataGridTemplateColumn ToolTipService.ToolTip="Delete" >
              <DataGridTemplateColumn.CellTemplate>
                <DataTemplate>
                  <Grid>
                    <View:ReasonPopup x:Name="RemoveRemarkReasonPopup" Result="RemoveRemarkReasonPopupResult" Title="Why delete remark?" />
                    <Button FontFamily="Marlett" Content="r" Click="BtnRemoveRemarkClick" Padding="0" Opacity="0"
                            Tag="{Binding ElementName=RemoveRemarkReasonPopup}"
                            ToolTip="{Binding Mode=OneWay, Path=CategoryId, Converter={conv:EmptyToParmStringConverter}, ConverterParameter='Delete|System generated alerts should be cleared by their corresponding special Alert buttons.'}" />
                  </Grid>
                </DataTemplate>
              </DataGridTemplateColumn.CellTemplate>
            </DataGridTemplateColumn>
          </DataGrid.Columns>
        </DataGrid>
      </GroupBox>

      <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" 
                    KeyboardNavigation.TabNavigation="Cycle"
                    Name="KeyboardFocusContainer"> <!-- nugget: keep tab navigation cycling in a certain container -->
        <Grid ScrollViewer.CanContentScroll="True" Name="MainPanel" >
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="auto" />
            <ColumnDefinition Width="auto" />
          </Grid.ColumnDefinitions>
          <Grid.RowDefinitions>
            <RowDefinition Height="auto" />
            <RowDefinition Height="auto" />
            <RowDefinition Height="auto" />
            <RowDefinition Height="15" />
            <RowDefinition Height="auto" />
            <RowDefinition Height="auto" />
            <RowDefinition Height="auto" />
            <RowDefinition Height="auto" />
            <RowDefinition Height="auto" />
            <RowDefinition Height="15" />
            <RowDefinition Height="auto" />
            <RowDefinition Height="auto" />
            <RowDefinition Height="auto" />
            <RowDefinition Height="auto" />
            <RowDefinition Height="auto" />
            <RowDefinition Height="auto" />
          </Grid.RowDefinitions>

          <Label Grid.Column="0" Grid.Row="0" Content="Alerts:"  />

          <WrapPanel Grid.Column="1" Margin="0 0 0 5" >

            <Border CornerRadius="10" Background="LightPink" Padding="6 3 6 5" BorderThickness="2" BorderBrush="LightGray">
              <Border.Visibility>
                <MultiBinding Converter="{conv:ANDVis}" >
                  <Binding Mode="OneWay" Path="IsExpired" />
                  <Binding Mode="OneWay" Path="IsVoided" ConverterParameter="{conv:InverseBooleanConverter}" />
                  <Binding Mode="OneWay" Path="IsExpired" ConverterParameter="{conv:InverseBooleanConverter}" />
                </MultiBinding>
              </Border.Visibility>
              <TextBlock FontSize="16" Text="Expired" VerticalAlignment="Center" />
            </Border>

            <Border CornerRadius="10" Background="LightPink" Padding="6 3 6 5" BorderThickness="2" BorderBrush="LightGray"
                    Visibility="{Binding Mode=OneWay, Path=IsViolation, Converter={conv:BooleanToVisibilityConverter}}" >
              <TextBlock FontSize="16" Text="Violation" FontWeight="Black" VerticalAlignment="Center" />
            </Border>

            <Border CornerRadius="10" Background="LightPink" Padding="6 3 6 5" BorderThickness="2" BorderBrush="LightGray" Margin="3 0 0 0"
                    Visibility="{Binding Mode=OneWay, Path=IsVoided, Converter={conv:BooleanToVisibilityConverter}}">
              <TextBlock FontSize="16" Text="Voided" FontWeight="Black" VerticalAlignment="Center" />
            </Border>

            <Border CornerRadius="10" Background="LightPink" Padding="6 3 6 5" BorderThickness="2" BorderBrush="LightGray" Margin="3 0 0 0"
                    Visibility="{Binding Mode=OneWay, Path=IsIncomplete, Converter={conv:BooleanToVisibilityConverter}}">
              <TextBlock FontSize="16" Text="Incomplete" VerticalAlignment="Center" />
            </Border>

            <Border CornerRadius="10,0,0,10" Background="LightPink" Padding="6 3 6 5" BorderThickness="2,2,1,2" BorderBrush="LightGray" Margin="3 0 0 0"
                    Visibility="{Binding Mode=OneWay, Path=Fields[InitPrt215], Converter={conv:EmptyToVisible}}">
              <TextBlock FontSize="14" TextAlignment="Center">P.O.<LineBreak/>Not Printed</TextBlock>
            </Border>

            <Border CornerRadius="0,10,10,0" Background="LightPink" Padding="6 3 6 5" BorderThickness="1,2,2,2" BorderBrush="LightGray" Margin="0"
                    Visibility="{Binding Mode=OneWay, Path=Fields[InitPrtAbw], Converter={conv:EmptyToVisible}}">
              <TextBlock FontSize="14" TextAlignment="Center">Abw.<LineBreak/>Not Printed</TextBlock>
            </Border>

          </WrapPanel>

          <StackPanel Grid.Column="1" Grid.Row="1" Orientation="Vertical"
                     Background="LightGoldenrodYellow" Margin="0,0,0,5" >
            <StackPanel Margin="10" Visibility="Collapsed">
              <!-- Visibility="{Binding Mode=OneWay, Path=GUID, Converter={conv:EmptyToVisible}}" -->
              <RadioButton Content="NF2" FontSize="16" FontWeight="Bold" VerticalAlignment="Center" GroupName="FormType"
                           IsChecked="{Binding Mode=OneWay, Path=Fields[FormTypeId], ConverterParameter=2, Converter={conv:RadioButtonGroupIsCheckedConverter}}" />
              <RadioButton Content="EF2" Name="rdoEF2" Margin="15,0,0,0" FontSize="16" FontWeight="Bold" VerticalAlignment="Center" GroupName="FormType"
                           IsChecked="{Binding Mode=OneWay, Path=Fields[FormTypeId], ConverterParameter=5, Converter={conv:RadioButtonGroupIsCheckedConverter}}" />
              <Control IsTabStop="False" Template="{StaticResource InfoIcon}" ToolTip="Euro VAT Form" Margin="3,2,0,0" />
            </StackPanel>
            <StackPanel Visibility="{Binding ElementName=rdoEF2, Path=IsChecked, Converter={conv:BooleanToVisibilityConverter}}">
              <Label Content="EF2 Language: " />
              <ComboBox SelectedIndex="0">
                <ComboBox.Items>
                  <ComboBoxItem Content="German" />
                  <ComboBoxItem Content="French" />
                  <ComboBoxItem Content="English" />
                </ComboBox.Items>
              </ComboBox>
            </StackPanel>
          </StackPanel>
          
          <Label Grid.Column="0" Grid.Row="2" Content="Sponsor:" />
          <WrapPanel Grid.Column="1" Grid.Row="2" Margin="0 3 0 0">
            <TextBlock VerticalAlignment="Top" Padding="2" Background="#eeeeee" >
              <Hyperlink Command="{x:Static View:RoutedCommands.OpenSponsor}" CommandParameter="{Binding Mode=OneTime, Path=Fields[SponsorGUID]}">
                <Run Text="{Binding Mode=OneWay, Path=Fields[SponsorName]}" />
              </Hyperlink>
            </TextBlock>
            <TextBlock Text="{Binding Mode=OneWay, Path=Fields[SponsorCCode], StringFormat='({0})'}" 
                       Margin="3 0 0 0" VerticalAlignment="Top" Padding="2" Background="#eeeeee"  />
            <Label Content="Authorized Dependent:" Margin="15 -3 0 0" />
            <TextBox Text="{Binding Mode=OneWay, Path=Fields[AuthorizedDependent]}" Style="{StaticResource ReadOnlyTextBox}" VerticalAlignment="Top" />
          </WrapPanel>

          <Label Grid.Column="0" Grid.Row="4" Content="Order Number:" />
          <StackPanel Grid.Column="1" Grid.Row="4" Margin="0 3 0 0" >
            <TextBox Text="{Binding Mode=OneWay, Path=Fields[OrderNumber]}" Style="{StaticResource ReadOnlyTextBox}" />
            <!--Label Content="Package Number:" Margin="0 -3 0 0" />
            <TextBox Text="{Binding Mode=OneWay, Path=Fields[PackageCode]}" Style="{StaticResource ReadOnlyTextBox}" /-->
            <Label Content="Expiration:" Margin="0 -3 0 0" />
            <TextBox Text="{Binding Mode=OneWay, Path=Fields[ExpirationDate], StringFormat={StaticResource DateTimeFormat}}" Style="{StaticResource ReadOnlyTextBox}" />
          </StackPanel>

          <Label Grid.Column="0" Grid.Row="5" Content="Sold:"  />
          <StackPanel Grid.Column="1" Grid.Row="5" Margin="0 3 0 15" >
            <TextBox Text="{Binding Mode=OneWay, Path=Fields[PurchaseDate], StringFormat={StaticResource DateTimeFormat}}" Style="{StaticResource ReadOnlyTextBox}" />
            <Label Content="by: " Margin="0 -3 0 0" />
            <TextBox Text="{Binding Mode=OneWay, Path=Fields[IssuedBy]}" Style="{StaticResource ReadOnlyTextBox}" />
          </StackPanel>

          <Label Grid.Column="0" Grid.Row="6" Content="Current Location:" VerticalAlignment="Center" />
          <StackPanel Grid.Column="1" Grid.Row="6" Margin="0 3 0 0">
            <TextBox Text="{Binding Mode=OneWay, Path=Fields[Location]}" Style="{StaticResource ReadOnlyTextBox}" />

            <View:UcToggleButton x:Name="btnLost" ToolTip="Mark this form as LOST" ButtonPadding="3" Margin="7,0,0,0"
                                  UpImage="/Assets/Glyphs/lost_x32.png" ImageHeight="24"
                                  Click="BtnLostVoidClick"
                                  IsChecked="{Binding Mode=TwoWay, Path=Fields[LocationCode], Converter={View:LostLocationCodeToBool}}"
                                  Visibility="{Binding Mode=OneWay, Path=IsLocked, Converter={conv:BooleanToVisibilityConverter}, ConverterParameter=Inverse}"
                                  Tag="25" /> <!-- 25 == RemarkTypeId for Lost -->

            <View:ReasonPopup x:Name="FormStatusReasonPopup" Result="FormStatusReasonPopupResult" 
                               DisplayMemberPath="Title" SelectedValuePath="RemarkTypeId" />

            <View:UcToggleButton x:Name="btnVoid" ToolTip="Mark this form as VOID" ButtonPadding="3" Margin="7,0,0,0"
                                  UpImage="/Assets/Glyphs/void_x32.png" ImageHeight="24"
                                  Click="BtnLostVoidClick"
                                  IsChecked="{Binding Mode=TwoWay, Path=IsVoided}"
                                  Visibility="{Binding Mode=OneWay, Path=IsLocked, Converter={conv:BooleanToVisibilityConverter}, ConverterParameter=Inverse}"
                                  Tag="14" /> <!-- 14 == RemarkTypeId for Void -->

            <View:UcToggleButton x:Name="btnViolation" ToolTip="Mark this form as a Violation" ButtonPadding="3" Margin="7,0,0,0" ButtonHeight="34"
                                  IsChecked="{Binding Mode=OneWay, Path=IsViolation}" IsCheckedChanged="BtnViolationIsCheckedChanged" 
                                  Visibility="{Binding Mode=OneWay, Path=IsLocked, Converter={conv:BooleanToVisibilityConverter}, ConverterParameter=Inverse}"
                                  UpImage="{StaticResource AlertIcon}" />

            <!--Button Padding="3" ToolTip="Mark this form as a Violation" Height="34" Margin="7,0,0,0" Click="btnViolation_Click"  >
              <Grid>
                <Path Stretch="UniformToFill" Data="M 1 0 L 2 2 0 2 Z" StrokeThickness="3" StrokeLineJoin="Round" Stroke="Red" Fill="Yellow" />
                <TextBlock Text="!" FontWeight="Black" FontSize="15pt" Margin="9,2,0,0" FontFamily="Times New Roman"
                           IsEnabled="{Binding Mode=OneWay, Path=IsViolation, Converter={conv:InverseBooleanConverter}}" />
              </Grid>
            </Button-->
            <View:ReasonPopup x:Name="ViolationReasonPopup" ItemsSource="{Binding Mode=OneWay, Source={x:Static Model:TaxFormModel.TaxFormViolationTypes}}"
                               DisplayMemberPath="Title" SelectedValuePath="RemarkTypeId" Result="ViolationReasonPopupResult" />

          </StackPanel>

          <Label Grid.Column="0" Grid.Row="7" Content="Returned:" VerticalAlignment="Center" />
          <StackPanel Grid.Column="1" Grid.Row="7" Margin="0 3 0 0" >
            <TextBox Text="{Binding Mode=OneWay, Path=Fields[ReturnedDate], StringFormat={StaticResource DateTimeFormat}}" Style="{StaticResource ReadOnlyTextBox}" />
            <Label Content="by: " />
            <TextBox Text="{Binding Mode=OneWay, Path=Fields[ReturnedBy]}" Style="{StaticResource ReadOnlyTextBox}" />
            <Button Name="btnReturn" Margin="7,0,0,0" ToolTip="Return this Tax Form" 
                    Click="BtnReturnClick"
                    Visibility="{Binding Mode=OneWay, Path=IsFormStatusClosed, Converter={conv:BooleanToVisibilityConverter}, ConverterParameter=Inverse}">
              <Button.IsEnabled>
                <MultiBinding Converter="{View:IsReturnFormEnabled}">
                  <Binding Mode="OneWay" />
                  <Binding Mode="OneWay" Path="Fields[LocationCode]" />
                  <Binding Mode="OneWay" Source="{x:Static Model:UserModel.Current}" Path="Access.IsAdmin" />
                </MultiBinding>
              </Button.IsEnabled>
              <Image Source="/Assets/Glyphs/arrow_right_green_x32.png" Height="24"/>
            </Button>
            <Button ToolTip="Return &amp; Close" Name="btnReturnClose" FontSize="14" VerticalAlignment="Stretch" 
                    Click="BtnReturnClick"
                    Visibility="{Binding Mode=OneWay, Path=IsFormStatusClosed, Converter={conv:BooleanToVisibilityConverter}, ConverterParameter=Inverse}">
              <Button.IsEnabled>
                <MultiBinding Converter="{View:IsReturnFormEnabled}">
                  <Binding Mode="OneWay" />
                  <Binding Mode="OneWay" Path="Fields[LocationCode]" />
                  <Binding Mode="OneWay" Source="{x:Static Model:UserModel.Current}" Path="Access.IsAdmin" />
                </MultiBinding>
              </Button.IsEnabled>

              <StackPanel>
                <TextBlock FontFamily="Marlett" VerticalAlignment="Center" Text="r" />
                <AccessText>&#160;(_r)</AccessText>
              </StackPanel>
            </Button>
            <Button ToolTip="Give Back to Customer for Correction" Name="btnGiveCustomer" Margin="7,0,0,0" 
                    Visibility="{Binding Mode=OneWay, Path=IsFormStatusClosed, Converter={conv:BooleanToVisibilityConverter}, ConverterParameter=Inverse}"
                    Click="BtnGiveCustomerClick">
              <Button.IsEnabled>
                <MultiBinding Converter="{View:IsGiveBackToCustomerEnabled}">
                  <Binding Mode="OneWay" />
                  <Binding Mode="OneWay" Path="Fields[LocationCode]" />
                  <Binding Mode="OneWay" Source="{x:Static Model:UserModel.Current}" Path="Access.IsAdmin" />
                </MultiBinding>
              </Button.IsEnabled>
              <Image Source="/Assets/Glyphs/user1_back_x32.png" Height="24" />
            </Button>

          </StackPanel>

          <Label Grid.Column="0" Grid.Row="8" Content="Filed:" VerticalAlignment="Center" />
          <StackPanel Grid.Column="1" Grid.Row="8" Margin="0 3 0 0" >
            <TextBox Text="{Binding Mode=OneWay, Path=Fields[FiledDate], StringFormat={StaticResource DateTimeFormat}}" Style="{StaticResource ReadOnlyTextBox}" />
            <Label Content="by: " />
            <TextBox Text="{Binding Mode=OneWay, Path=Fields[FiledBy]}" Style="{StaticResource ReadOnlyTextBox}" />
            <Button Name="btnFile" Margin="7,0,0,0" ToolTip="File - Form must be from current office"
                    Click="BtnFileClick"
                    Visibility="{Binding Mode=OneWay, Path=IsLocked, Converter={conv:BooleanToVisibilityConverter}, ConverterParameter=Inverse}">
              <Image Source="/Assets/Glyphs/cabinet_x32.png" Height="24"/>
            </Button>
            <Button ToolTip="File &amp; Close" FontSize="14" VerticalAlignment="Stretch"
                    Visibility="{Binding Mode=OneWay, Path=IsLocked, Converter={conv:BooleanToVisibilityConverter}, ConverterParameter=Inverse}"
                    Click="BtnFileClick" Name="btnFileClose">
              <StackPanel>
                <TextBlock FontFamily="Marlett" VerticalAlignment="Center" Text="r" />
                <AccessText>&#160;(_f)</AccessText>
              </StackPanel>
            </Button>
          </StackPanel>

          <Label Grid.Column="0" Grid.Row="10" Content="_Used:" VerticalAlignment="Center" Target="{Binding ElementName=UsedDate}" />
          <StackPanel Grid.Column="1" Grid.Row="10" Margin="0 3 0 0" >
            <DatePicker Name="UsedDate"
                        SelectedDate="{Binding Mode=TwoWay, Path=Fields[UsedDate], ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}" 
                        IsEnabled="{Binding Path=IsLocked, Mode=OneWay, Converter={conv:InverseBooleanConverter}}" />
          </StackPanel>

          <Label Grid.Column="0" Grid.Row="11" Content="_Transaction Type:" Target="{Binding ElementName=cbxTransactionType}" />
          <StackPanel Grid.Column="1" Grid.Row="11" Margin="0 3 0 0" Orientation="Vertical">
            <ComboBox Name="cbxTransactionType" VerticalAlignment="Top" HorizontalAlignment="Left"
                      ItemsSource="{Binding Mode=OneWay, Source={x:Static Model:TaxFormModel.TransactionTypes}}"
                      SelectedValuePath="TransactionTypeID"
                      SelectedValue="{Binding Mode=TwoWay, Path=Fields[TransTypeID], ValidatesOnDataErrors=True}"
                      IsEnabled="{Binding Mode=OneWay, Path=IsLocked, Converter={conv:InverseBooleanConverter}}"
                      SelectionChanged="CbxTransactionTypeSelectionChanged"
                      TextSearch.TextPath="TransactionType">
              <!-- nugget: to allow keyboard selection in a DataTemplate combobox - just set DisplayMemberPath to the search field -->
              <!-- nugget: disabled ComboBox items -->
              <ComboBox.ItemContainerStyle>
                <Style>
                  <Style.Triggers>
                    <DataTrigger Binding ="{Binding Mode=OneWay, Path=Active}" Value="False">
                      <Setter Property="ComboBoxItem.Focusable" Value="False"/>
                      <Setter Property="ComboBoxItem.IsEnabled" Value="False"/>
                      <Setter Property="ComboBoxItem.IsHitTestVisible" Value="False"/>
                      <!-- nugget: prevent keyboard selection of disabled ComboBox items -->
                    </DataTrigger>
                  </Style.Triggers>
                </Style>
              </ComboBox.ItemContainerStyle>
              <ComboBox.ItemTemplate>
                <DataTemplate>
                  <TextBlock
                    Text="{Binding Mode=OneWay, Path=TransactionType}"
                    Foreground="{Binding Mode=OneTime, Path=TriState, Converter={conv:IntToSolidBrushConverter}, ConverterParameter='Gray,Black,Red'}"
                  />
                </DataTemplate>
              </ComboBox.ItemTemplate>
            </ComboBox>
            <View:UcDetailsView x:Name="ExtendedFields" EmptyMessage="" IsReadOnly="{Binding Mode=OneWay, Path=IsLocked}" ItemsSource="{Binding Mode=OneWay, Path=ExtendedFields}" />
          </StackPanel>

          <Label Grid.Column="0" Grid.Row="12" Content="_Vendor:" Target="{Binding ElementName=btnVendor}" />
          <StackPanel Grid.Column="1" Grid.Row="12" Margin="0 3 0 0">
            <TextBox Name="txtVendor" Text="{Binding Mode=OneWay, Path=Fields[Vendor], ValidatesOnDataErrors=True}" Style="{StaticResource ReadOnlyTextBox}" MinWidth="90" />
            <Button Content="  ...  " Name="btnVendor" Click="BtnVendorClick"
                    IsEnabled="{Binding Path=IsLocked, Mode=OneWay, Converter={conv:InverseBooleanConverter}}" />
            <!-- GotKeyboardFocus="btnVendor_GotKeyboardFocus" -->
            <View:VendorSearch x:Name="popVendorSearch" PlacementTarget="{Binding ElementName=MainPanel}" />
          </StackPanel>

          <!--Label Grid.Column="0" Grid.Row="8" Content="Good / Service:" />
          <StackPanel Grid.Column="1" Grid.Row="8" Margin="0 3 0 15">
            <TextBox Name="txtGoodService" Text="{Binding Mode=OneWay, Path=Fields[GoodsServiceName]}" Style="{StaticResource ReadOnlyTextBox}" MinWidth="90" />
            <Button Content="  ...  " Name="btnGoodService" Click="btnGoodService_Click" IsEnabled="{Binding Path=IsLocked, Mode=OneWay, Converter={conv:InverseBooleanConverter}}" />
            <View:ucGoodsAndServicesSearch x:Name="popGoodsAndServicesSearch" PlacementTarget="{Binding ElementName=txtGoodService}" />
          </StackPanel-->

          <Label Grid.Column="0" Grid.Row="13" Content="Total _Cost:" Target="{Binding ElementName=txtTotalCost}" />
          <StackPanel Orientation="Vertical" Grid.Column="1" Grid.Row="13" Margin="0 3 0 15">
            <StackPanel >
              <TextBox Name="txtTotalCost" Text="{Binding Mode=TwoWay, Path=Fields[TotalCost], ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}" MinWidth="50" 
                    IsEnabled="{Binding Path=IsLocked, Mode=OneWay, Converter={conv:InverseBooleanConverter}}" />
              <ComboBox SelectedValuePath="Tag" SelectedValue="{Binding Mode=TwoWay, Path=Fields[CurrencyUsed], ValidatesOnDataErrors=True}"
                  IsEnabled="{Binding Path=IsLocked, Mode=OneWay, Converter={conv:InverseBooleanConverter}}" >
                <ComboBoxItem Tag="2">Euro</ComboBoxItem>
                <ComboBoxItem Tag="1">USD</ComboBoxItem>
              </ComboBox>
              <Label Content="Check Number:" Margin="0 -3 0 0" />
              <TextBox Name="txtCheckNumber" MinWidth="50" 
                        IsEnabled="{Binding Path=IsLocked, Mode=OneWay, Converter={conv:InverseBooleanConverter}, UpdateSourceTrigger=PropertyChanged}" />
            </StackPanel>
            <CheckBox Visibility="{Binding Mode=OneWay, Path=IsTotalCostMinWarning, Converter={conv:BooleanToVisibilityConverter}}"
                      IsChecked="{Binding Mode=TwoWay, Path=IsTotalCostMinWarningConfirmed, ValidatesOnDataErrors=True}"
                      IsEnabled="{Binding Path=IsLocked, Mode=OneWay, Converter={conv:InverseBooleanConverter}}" >
              <TextBlock Text="Check this box to confirm Total Cost is really that small." Background="Pink" />
            </CheckBox>
            <CheckBox Visibility="{Binding Mode=OneWay, Path=IsTotalCostMaxViolation, Converter={conv:BooleanToVisibilityConverter}}"
                      IsChecked="{Binding Mode=TwoWay, Path=IsTotalCostMaxViolationConfirmed, ValidatesOnDataErrors=True}" 
                      IsEnabled="{Binding Path=IsLocked, Mode=OneWay, Converter={conv:InverseBooleanConverter}}" >
              <TextBlock Text="Total Cost >2499 Euro.  Check this box to confirm violation." Background="Pink" />
            </CheckBox>

          </StackPanel>

          <Label Grid.Column="0" Grid.Row="14" Content="_Description:" Target="{Binding ElementName=txtDescription}" />
          <View:UcTextBoxWatermarked Grid.Row="14" Grid.Column="1" 
              x:Name="txtDescription" 
              HorizontalAlignment="Left" Height="48" Width="300"
              Watermark="For example, the type of service purchased or a brief list of items which where purchased, etc."
              TextWrapping="Wrap" AcceptsReturn="True" 
              Text="{Binding Mode=TwoWay, Path=Fields[Description], UpdateSourceTrigger=PropertyChanged}" 
              IsEnabled="{Binding Path=IsLocked, Mode=OneWay, Converter={conv:InverseBooleanConverter}}" />
        </Grid>
      </ScrollViewer>
    </Grid>
  </Grid>

</View:TabBase>


  