<Window 
  x:Class="iTRAACv2.View.MainWindow"
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:local="clr-namespace:iTRAACv2"
  xmlns:global="clr-namespace:;assembly="
  xmlns:conv="clr-namespace:WPFValueConverters"
  xmlns:Model="clr-namespace:iTRAACv2.Model"
  xmlns:View="clr-namespace:iTRAACv2.View" 

  Name="MainForm"
  Background="LightSteelBlue"
  Left="{Binding Mode=TwoWay, Source={StaticResource AppConfigSettings}, Path=Default.MainWinLeft}"
  Top="{Binding Mode=TwoWay, Source={StaticResource AppConfigSettings}, Path=Default.MainWinTop}"
  Height="{Binding Mode=TwoWay, Source={StaticResource AppConfigSettings}, Path=Default.MainWinHeight}"
  Width="{Binding Mode=TwoWay, Source={StaticResource AppConfigSettings}, Path=Default.MainWinWidth}"
>

  <!-- nugget: the xmlns:global is a major breakthrough! couldn't figure out how to represent the global aka anonymous namespace, the empty "assembly=" reference was the key (way obscure if you ask me!!) 
       nugget: found here: http://www.netframeworkdev.com/windows-presentation-foundation-wpf/can-i-specify-the-global-namespace-in-clrnamespace-33837.shtml (blocked by Army firewall, pulled from Google cache :) -->

  <!-- xmlns:diagnostics="clr-namespace:System.Diagnostics;assembly=WindowsBase" -->

  <Window.Title> <!-- nugget: Binding Window.Title to AssemblyInfo properties -->
    <MultiBinding StringFormat="{}{0} (build: {1})"> <!-- nugget: -->
      <Binding Source="{x:Static global:AssemblyHelper.Properties}" Path="[Title]" Mode="OneTime" /> <!-- nugget: indexer property XAML Binding syntax -->
      <Binding Source="{x:Static global:AssemblyHelper.Properties}" Path="[FileVersion]" Mode="OneTime" /> <!-- nugget: -->
    </MultiBinding>
  </Window.Title>

  <Window.InputBindings>
    <KeyBinding Key="F4" Modifiers="Control" Command="{x:Static View:RoutedCommands.CloseTab}"  />
  </Window.InputBindings>
  
  <Window.CommandBindings>
    <CommandBinding Command="{x:Static View:RoutedCommands.OpenTaxForm}" Executed="OpenTaxFormExecuted" />
    <CommandBinding Command="{x:Static View:RoutedCommands.OpenSponsor}" Executed="OpenSponsorExecuted" />
    <CommandBinding Command="{x:Static View:RoutedCommands.CloseTab}" Executed="CloseTabExecuted" />
  </Window.CommandBindings>
  
  <Window.Resources>
    <!-- nugget: fadeaway animation - see the code behind as well -->
    <Storyboard x:Key="Fadeaway_Animation">
      <!-- full initial opacity -->
      <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1.0" />
      <!-- fadeaway opacity - begin fading away from 100% after 1 seconds, progress to 0% in 5 seconds total -->
      <DoubleAnimation Storyboard.TargetProperty="Opacity" Duration="0:0:4.5" From="1.0" To="0.0" BeginTime="0:0:0" />
      
      <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="IsOpen" >
        <DiscreteBooleanKeyFrame Value="True" KeyTime="0:0:0" />
      </BooleanAnimationUsingKeyFrames>

      <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="IsOpen" >
        <DiscreteBooleanKeyFrame Value="False" KeyTime="0:0:4" />
      </BooleanAnimationUsingKeyFrames>
    </Storyboard>

    <!-- nugget: template the TabControl.TabItem.Header with a close button and nifty model bindings (e.g. Model.IsModified adornment)
         only model oriented tabs receive this template -->
    <DataTemplate x:Key="BOTabItemHeaderTemplate">
      <StackPanel Orientation="Horizontal" PreviewMouseUp="TabItemHeaderPreviewMouseUp"  Tag="{Binding Mode=OneTime, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=TabItem}}" >
        <!--TextBlock VerticalAlignment="Center" Margin="0 0 5 0" Foreground="Red" FontSize="22" Text="*" Visibility="{Binding Mode=OneWay, Path=IsModified, Converter={conv:BooleanToVisibilityConverter}}" /-->
        <Image Source="/Assets/Glyphs/pin_red_x24.png" Visibility="{Binding Mode=OneWay, Path=IsModified, Converter={conv:BooleanToVisibilityConverter}}" ToolTip="Unsaved Changes" />
        <TextBlock Name="txtTabHeader" VerticalAlignment="Center" /> <!-- ="{Binding Mode=OneWay, Path=Mem.LName}" diagnostics:PresentationTraceSources.TraceLevel="High"  /--> <!-- nugget: no Path means pass the whole DataContext as the Converter "Value" -->
        <!-- nugget: Marlett font, "r" character = the common Vista close button icon -->
        <!-- nugget: ToolBar.ButtonStyleKey provides a convenient "Flat" button look that we can steal -->
        <Button VerticalAlignment="Center" Click="CloseTab" FontFamily="Marlett" Content="r" 
                Style="{StaticResource FlatButton}" Margin="5 0 0 0" 
                Tag="{Binding Mode=OneTime, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=TabItem}}" />
      </StackPanel>
    </DataTemplate>

  </Window.Resources>

  <Grid Name="RootLayoutGrid">
    <Grid.RowDefinitions>
      <RowDefinition Height="Auto" />                               <!-- Row 0 = ToolBar -->
      <RowDefinition Height="0*" Name="UserMessageRow" />     <!-- Row 1 = Message Window -->
      <RowDefinition Height="Auto" />                               <!-- Row 2 = Horizontal GridSplitter -->
      <RowDefinition Height="*" />                                  <!-- Row 3 = Main Body - Column 0 = Message Window, GridSplitter, TabControl - Col 1 = Returns Window -->
      <RowDefinition Height="Auto" />                               <!-- Row 4 = StatusBar -->
    </Grid.RowDefinitions>
    
    <ToolBar Grid.Row="0" HorizontalAlignment="Right" VerticalAlignment="Top" >
      <ToolBar.Resources>
        <Style TargetType="{x:Type View:UcToggleButton}">
          <Setter Property="ToggleButtonStyle" Value="{StaticResource FlatToggleButton}" />
        </Style>
      </ToolBar.Resources>

      <Menu Name="MainMenu" VerticalAlignment="Center" Background="Transparent" >
        <MenuItem Header="Admin Tools" HorizontalAlignment="Center" Visibility="{Binding Source={x:Static Model:UserModel.Current}, Path=Access.IsAdmin, Mode=OneWay, Converter={conv:BooleanToVisibilityConverter}}">
          <MenuItem Header="Nothing to see here" />
        </MenuItem>
      </Menu>

      <View:UcToggleButton x:Name="btnUserMessages" IsCheckedChanged="BtnUserMessagesIsCheckedChanged" 
                            Text="Messages" UpImage="/Assets/Glyphs/bubble.png" 
                            ToolTip="Show Recent System Messages"  />

      <View:UcToggleButton x:Name="btnReturns" IsCheckedChanged="BtnReturnsIsCheckedChanged"
                            Text="Returns" UpImage="/Assets/Glyphs/arrow_right_green_x28.png"
                            ToolTip="Show Returns Window" />

    </ToolBar>

    <Popup Name="popUserMessage" StaysOpen="True" AllowsTransparency="True"
           Placement="Center" PlacementTarget="{Binding Mode=OneWay, ElementName=MainForm}"
           MouseEnter="UserMessageMouseEnter" MouseLeave="UserMessageMouseLeave"
           MouseLeftButtonUp="PopUserMessageMouseLeftButtonUp">
      <!-- nugget: Popup doesn't appear to automatically cascade it's Opacity property, had to Bind Popup.Content.Opacity to Popup.Opacity -->
      <Border CornerRadius="7" BorderThickness="0" Padding="3" Background="Red"
              Opacity="{Binding Mode=OneWay, ElementName=popUserMessage, Path=Opacity}" >
        <TextBlock Name="lblUserMessage" FontSize="16" Background="Red" Foreground="White" Margin="0" Padding="3 0"
                   MaxWidth="450" TextWrapping="Wrap" />
      </Border>
    </Popup>

    <!--View:UcSpinningGears x:Name="popWaitAnimation" Placement="Center" PlacementTarget="{Binding Mode=OneTime, ElementName=MainForm}" /-->

    <DataGrid Grid.Row="1" x:Name="gridUserMessages" HeadersVisibility="None" AutoGenerateColumns="True" 
                    ItemsSource="{Binding Mode=OneWay, Source={x:Static Model:UserMessagesModel.ListBindingWrapper}}"
                    Visibility="{Binding Mode=OneWay, ElementName=btnUserMessages, Path=IsChecked, Converter={conv:BooleanToVisibilityConverter}}" />

    <GridSplitter Grid.Row="2" Background="Transparent" Height="5" HorizontalAlignment="Stretch"
                          ResizeBehavior="PreviousAndNext" ResizeDirection="Rows"
                          Visibility="{Binding Mode=OneWay, ElementName=btnUserMessages, Path=IsChecked, Converter={conv:BooleanToVisibilityConverter}}" />

    <!-- nugget: this is just absolutely steller!! completely painless global window resize via simple pairing of a LayoutTransform and a Slider, gotta love it -->
    <!-- couple notes:
         . code copied from here: http://compilewith.net/2008/06/wpf-zoom-decorator-part1.html
         . the surrounding border is crucial to prevent the scaled content from blowing out of its "container"
         . LayoutTransform yields the preferred result where everything scales to fill in the space available but is also constrained so that scrollbars fire up where necessary
      -->
    <Border Grid.Row="3" ClipToBounds="True" BorderThickness="0" > <!-- nugget: -->
      <ContentPresenter> <!-- nugget: -->
        <ContentPresenter.LayoutTransform> <!-- nugget: -->
          <ScaleTransform ScaleX="{Binding Mode=OneWay, Path=Value, ElementName=sliderZoom}" ScaleY="{Binding Path=Value, ElementName=sliderZoom}"  /> <!-- nugget: -->
        </ContentPresenter.LayoutTransform> <!-- nugget: -->
        <ContentPresenter.Content> <!-- nugget: -->

          <!-- nugget: main content -->
          <Grid >
            <Grid.RowDefinitions>
              <RowDefinition Height="*" /> <!-- Col 0, Row 2 = Main Body - TabControl -->
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />    <!-- col 0 = Main Body -->
              <ColumnDefinition Width="Auto" /> <!-- col 1 = Vertical GridSplitter -->
              <ColumnDefinition Width="0*" Name="ReturnsColumn" /> <!-- col 2 = Returns Window -->
            </Grid.ColumnDefinitions>
             
            <TabControl Name="tabsMain" Margin="0 5 0 0" Background="{StaticResource MainBackgroundBrush}" >

              <TabItem Style="{StaticResource LargeTabItem}" Header="Home" x:Name="HomeTab">
                <TabControl Background="{StaticResource MainBackgroundBrush}" >

                  <TabItem Header="Home Page">
                    <WebBrowser Source="http://144.170.180.167/iTRAAC/home.htm" />
                  </TabItem>

                  <TabItem Header="Daily Activity">
                    <View:DailyActivity />
                  </TabItem>
                  
                  <TabItem Header="Dashboard">
                    <!-- 
                      http://144.170.180.167
                      https://public.euromwr.army.mil
                    -->
                    <WebBrowser Source="http://144.170.180.167/iTRAAC/WebDash/WebDashTestPage.aspx#/Home" Grid.Column="1" />
                  </TabItem>

                  <TabItem Header="Settings">
                    <View:SettingsPage />
                  </TabItem>

                </TabControl>
              </TabItem>

              <TabItem Header="Customer Search" Style="{StaticResource LargeTabItem}" Background="{StaticResource OrangeGradient}">
                <View:CustomerSearch />
              </TabItem>

            </TabControl>

            <GridSplitter Grid.Column="1" Background="Transparent" Width="5" VerticalAlignment="Stretch" 
                        ResizeBehavior="PreviousAndNext" ResizeDirection="Columns"
                        Visibility="{Binding Mode=OneWay, ElementName=btnReturns, Path=IsChecked, Converter={conv:BooleanToVisibilityConverter}}" />

            <View:Returns x:Name="ReturnForms" Grid.Column="2" Grid.RowSpan="3"
                                 Visibility="{Binding Mode=OneWay, ElementName=btnReturns, Path=IsChecked, Converter={conv:BooleanToVisibilityConverter}}" />
                        
          </Grid>
        </ContentPresenter.Content> <!-- nugget: -->
      </ContentPresenter> <!-- nugget: -->
    </Border> <!-- nugget: -->

    <!-- status bar -->
    <StatusBar Grid.Row="4" Background="{StaticResource GreyGradient}" >
      <StatusBar.Resources>
        <Style TargetType="{x:Type Separator}" BasedOn="{StaticResource FlatSeparator}" />
      </StatusBar.Resources>

      <Grid>
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto" /> <!-- Login Info -->
          <ColumnDefinition Width="Auto" /> <!-- Font Size Slider  -->
          <ColumnDefinition Width="Auto" /> 
          <ColumnDefinition Width="*"  />
        </Grid.ColumnDefinitions>

        <!-- field one -->
        <StackPanel Orientation="Horizontal" Grid.Column="0" >
          <TextBlock VerticalAlignment="Center" Text="Login:" Margin="0 0 3 0" />
          <Label VerticalAlignment="Center" Name="lblLogin" FontWeight="Bold" Content="{Binding Path=Name, Source={x:Static Model:UserModel.Current}, Mode=OneWay}" Padding="0" MouseDoubleClick="LblLoginMouseDoubleClick" />
          <TextBlock VerticalAlignment="Center" Text="{Binding StringFormat=', Office: {0}', Path=TaxOfficeCode, Source={x:Static local:Properties.Settings.Default}, Mode=OneWay}" Padding="0" />
          <Popup Name="popAdminOverride" Placement="Top" StaysOpen="true" AllowsTransparency="True" >
            <Border BorderThickness="1" BorderBrush="DarkGray" Background="{StaticResource PopUpBackgroundBrush}" Padding="3" CornerRadius="5" >
              <StackPanel Orientation="Horizontal">
                <Label Content="Admin Password:" />
                <PasswordBox Name="txtAdminPassword" Width="150" KeyDown="TxtAdminPasswordKeyDown" />
              </StackPanel>
            </Border>
          </Popup>
          <Label VerticalAlignment="Center" Content="(Admin)" Padding="0" Name="lblAdmin" MouseDoubleClick="LblAdminMouseDoubleClick"
                 Visibility="{Binding Source={x:Static Model:UserModel.Current}, Path=Access.IsAdmin, Mode=OneWay, Converter={conv:BooleanToVisibilityConverter}}"
                 Foreground="Red" FontWeight="Bold" Margin="3 0 3 0" />
          <TextBlock VerticalAlignment="Center" Text="{Binding Source={x:Static Model:UserModel.Current}, Path=Access.AdminOverrideRemaining, Mode=OneWay, StringFormat='[mm:ss]'}"
                 Visibility="{Binding Source={x:Static Model:UserModel.Current}, Path=Access.IsAdminOverride, Mode=OneWay, Converter={conv:BooleanToVisibilityConverter}}"
                 Padding="0" />
        </StackPanel>

        <!-- field two -->
        <StackPanel Orientation="Horizontal" Grid.Column="1" Margin="3 0 3 0">
          <Separator />
          <TextBlock VerticalAlignment="Center" Text="Font Size:" Margin="3 0 3 0" />
          <Slider TickFrequency="0.1" IsSnapToTickEnabled="True" AutoToolTipPlacement="TopLeft"
                  AutoToolTipPrecision="1" Width="100" Name="sliderZoom" Minimum="0.5" Maximum="3"
                  Value="{Binding Mode=TwoWay, Source={StaticResource AppConfigSettings}, Path=Default.ZoomSize}" />
          <Button Content="Reset" Click="BtnFontSizeResetClick" />
          <!--TextBlock Text="{Binding Mode=OneWay, Path=Value, ElementName=sliderZoom}" /-->
        </StackPanel>

        <StackPanel Orientation="Horizontal" Grid.Column="2" Margin="3 0 3 0">
          <Separator />

        </StackPanel>

      </Grid>

    </StatusBar>
  </Grid>
</Window>
