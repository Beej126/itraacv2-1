<local:tabBusinessBase x:Class="iTRAACv2.tabSponsor"
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:global="clr-namespace:;assembly="
  xmlns:local="clr-namespace:iTRAACv2"
  xmlns:conv="clr-namespace:WPFValueConverters"
                       xmlns:diagnostics="clr-namespace:System.Diagnostics;assembly=WindowsBase"
>

  <!-- xmlns:diagnostics="clr-namespace:System.Diagnostics;assembly=WindowsBase" -->
  <!-- diagnostics:PresentationTraceSources.TraceLevel="High" -->


  <local:tabBusinessBase.Resources>

    <LinearGradientBrush x:Key="TabBackground" StartPoint="0,0" EndPoint="0,1">
      <GradientStop Color="#DCEDFF" Offset="0.0"/>
      <GradientStop Color="#5BA0E5" Offset="1.0"/>
    </LinearGradientBrush>

  </local:tabBusinessBase.Resources>


  <Grid>
    <Grid.RowDefinitions>
      <RowDefinition Height="auto"/>
      <RowDefinition Height="auto"/>
      <RowDefinition Height="*"/>
    </Grid.RowDefinitions>

    <Grid Grid.Row="0" >
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="auto"  />
        <ColumnDefinition Width="*" />
        <ColumnDefinition Width="auto" />
      </Grid.ColumnDefinitions>

      <ToolBar Grid.Row="0">
        <Button Name="btnSave" Click="btnSave_Click" IsEnabled="{Binding Mode=OneWay, Path=IsModified}">
          <StackPanel>
            <Image Source="/Views/glyphs/save.png" Style="{StaticResource CanDisableNestedImage}" />
            <Label Content="Save" />
          </StackPanel>
        </Button>
        <Button Name="btnSaveClose" Click="btnSaveClose_Click" IsEnabled="{Binding Mode=OneWay, Path=IsModified}">
          <StackPanel>
            <Image Source="/Views/glyphs/save_close.png" Style="{StaticResource CanDisableNestedImage}" />
            <Label Content="Save &amp; Close" />
          </StackPanel>
        </Button>
      </ToolBar>

      <ToolBar Grid.Column="2">
        <local:ucToggleButton x:Name="btnCart" ToolTip="Shopping Cart" Text="Cart" Width="50" 
                                ToggleButtonStyle="{StaticResource FlatToggleButton}"
                                IsCheckedChanged="btnCart_IsCheckedChanged"/>
      </ToolBar>
    </Grid>
    
    <Grid Grid.Row="1" >
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="*"/>
        <ColumnDefinition Width="auto" />
        <ColumnDefinition Width="auto" Name="MatchesColumn" />
        <ColumnDefinition Width="auto" />
        <ColumnDefinition Width="auto" Name="ShoppingCartColumn" />
      </Grid.ColumnDefinitions>

      <!--global:ConstrainingStackPanel x:Name="SponsorInfoPanel" -->
      <DockPanel Name="SponsorInfoPanel">
        <GroupBox global:ConstrainingStackPanel.Constrain="True" DockPanel.Dock="Top" HorizontalAlignment="Left" Style="{x:Null}">
          <GroupBox.Header>
            <StackPanel Orientation="Horizontal">
              <TextBlock Text="Members" VerticalAlignment="Center" Margin="0,0,5,0" FontSize="16" />
              <Button Content="Add" Padding="3 2" Margin="3" Click="AddMember_Click"
                      IsEnabled="{Binding Mode=OneWay, Path=IsHouseholdActive}">
                <Button.ToolTip>
                  <ToolTip Visibility="{Binding Mode=OneWay, Path=IsHouseholdActive, Converter={conv:BooleanToVisibilityConverter}, ConverterParameter=Inverse}"
                           Content="Sponsor not active, no members can be added until resolved." />
                </Button.ToolTip>
              </Button>
            </StackPanel>
          </GroupBox.Header>

          <!-- basic "Psuedo DataGrid" idea stolen from here: http://stackoverflow.com/questions/1176623/wpf-how-to-stop-an-itemscontrol-psuedo-grids-columns-from-dancing-jumping-arou -->
          <!-- but there's a super annoying visual gotcha, the column widths do a little "jitter bug dance" when any textbox expands past it's original layout -->
          <!-- i'm going to leave it for now and hopefully identify a good mitigation when the heat is off -->
          <StackPanel Grid.IsSharedSizeScope="True">
            <!-- nugget: Setting Grid.IsSharedSizeScope="True" on the *outermost*wrapping*control* is key to having multiple Grids' columns line up together -->
            <StackPanel.Resources>
              <Style x:Key="HeaderLabel" TargetType="Label">
                <Setter Property="Background" Value="{StaticResource GreyGradient}" />
                <!--Setter Property="FontWeight" Value="Bold" /-->
                <Setter Property="BorderBrush" Value="DarkGray" />
                <Setter Property="BorderThickness" Value="1" />
              </Style>
            </StackPanel.Resources>

            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition SharedSizeGroup="Type" />
                <ColumnDefinition SharedSizeGroup="SSN" />
                <ColumnDefinition SharedSizeGroup="DoDId" />
                <ColumnDefinition SharedSizeGroup="FName" />
                <ColumnDefinition SharedSizeGroup="MI" />
                <ColumnDefinition SharedSizeGroup="LName" />
                <ColumnDefinition SharedSizeGroup="Suffix" />
                <ColumnDefinition SharedSizeGroup="EMail" />
                <ColumnDefinition SharedSizeGroup="CCode" />
                <ColumnDefinition SharedSizeGroup="Extra" />
              </Grid.ColumnDefinitions>
            
              <Label Style="{StaticResource HeaderLabel}" Grid.Column="1" Content="SSN"   />
              <Label Style="{StaticResource HeaderLabel}" Grid.Column="2" Content="DoDId" />
              <Label Style="{StaticResource HeaderLabel}" Grid.Column="3" Content="First Name" />
              <Label Style="{StaticResource HeaderLabel}" Grid.Column="4" Content="MI" />
              <Label Style="{StaticResource HeaderLabel}" Grid.Column="5" Content="Last Name" />
              <Label Style="{StaticResource HeaderLabel}" Grid.Column="6">
                <Label.Content>
                  <DockPanel>
                    <TextBlock Text="Suffix" />
                    <Control Margin="3,0,0,0" Template="{StaticResource InfoIcon}" ToolTip="e.g. Jr., II, III, etc." />
                  </DockPanel>
                </Label.Content>
              </Label>
              <Label Style="{StaticResource HeaderLabel}" Grid.Column="7" Content="EMail" />
              <Label Style="{StaticResource HeaderLabel}" Grid.Column="8" Content="CCode" />
            
            </Grid>
            
            <ItemsControl ItemsSource="{Binding Mode=OneWay, Path=HouseMembers}">
              <ItemsControl.ItemTemplate>
                <DataTemplate>
                  <Grid>
                    <Grid.ColumnDefinitions>
                      <!-- nugget: <ColumnDefinition SharedSizeGroup="XYZ" /> is key to having multiple Grids' columns line up together - -->
                      <ColumnDefinition SharedSizeGroup="Type" />
                      <ColumnDefinition SharedSizeGroup="SSN" />
                      <ColumnDefinition SharedSizeGroup="DoDId" />
                      <ColumnDefinition SharedSizeGroup="FName" />
                      <ColumnDefinition SharedSizeGroup="MI" />
                      <ColumnDefinition SharedSizeGroup="LName" />
                      <ColumnDefinition SharedSizeGroup="Suffix" />
                      <ColumnDefinition SharedSizeGroup="EMail" />
                      <ColumnDefinition SharedSizeGroup="CCode" />
                      <ColumnDefinition SharedSizeGroup="Extra" />
                    </Grid.ColumnDefinitions>

                    <Label Content="Sponsor" FontSize="11pt" FontWeight="Bold" HorizontalAlignment="Right"
                           Visibility="{Binding Mode=OneWay, Path=IsSponsor, Converter={conv:BooleanToVisibilityConverter}}"/>

                    <Label Content="Spouse" HorizontalAlignment="Right"
                           Visibility="{Binding Mode=OneWay, Path=IsSpouse, Converter={conv:BooleanToVisibilityConverter}}"/>

                    <Button Content="Set As Spouse" Click="SetSpouse_Click" Tag="{Binding Mode=OneWay, Path=RowGUID}" 
                            Visibility="{Binding Mode=OneWay, Path=IsSponsorOrSpouse, Converter={conv:BooleanToVisibilityConverter}, ConverterParameter=Inverse}"
                            Style="{StaticResource DimFlatButton}" />

                    <StackPanel Grid.Column="1" Orientation="Horizontal" 
                                Visibility="{Binding Mode=OneWay, Path=IsSponsorOrSpouse, Converter={conv:BooleanToVisibilityConverter}}">
                      <TextBox Width="35" MaxLength="3" PreviewTextInput="NumericOnly_PreviewTextInput" Text="{Binding Mode=TwoWay, Path=SSN1, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}" />
                      <TextBlock Text="-" VerticalAlignment="Center" />
                      <TextBox Width="30" MaxLength="2" PreviewTextInput="NumericOnly_PreviewTextInput" Text="{Binding Mode=TwoWay, Path=SSN2, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}" />
                      <TextBlock Text="-" VerticalAlignment="Center" />
                      <TextBox Width="40" MaxLength="4" PreviewTextInput="NumericOnly_PreviewTextInput" Text="{Binding Mode=TwoWay, Path=SSN3, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}" 
                               LostFocus="txtSSN3_LostFocus" />
                    </StackPanel>

                    <TextBox Grid.Column="2" 
                             Text="{Binding Mode=TwoWay, Path=DoDId, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}"
                             Visibility="{Binding Mode=OneWay, Path=IsSponsorOrSpouse, Converter={conv:BooleanToVisibilityConverter}}"/>

                    <TextBox Grid.Column="3" 
                             Text="{Binding Mode=TwoWay, Path=FName, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}"/>

                    <TextBox Grid.Column="4"
                             Text="{Binding Mode=TwoWay, Path=MI, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}"/>

                    <TextBox Grid.Column="5" 
                             Text="{Binding Mode=TwoWay, Path=LName, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}"/>

                    <TextBox Grid.Column="6" 
                             Text="{Binding Mode=TwoWay, Path=Suffix, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}"/>

                    <TextBox Grid.Column="7" 
                             Text="{Binding Mode=TwoWay, Path=Email, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}"
                             Visibility="{Binding Mode=OneWay, Path=IsSponsorOrSpouse, Converter={conv:BooleanToVisibilityConverter}}"/>

                    <TextBox Grid.Column="8" Style="{StaticResource ReadOnlyTextBox}"
                             Text="{Binding Mode=OneWay, Path=CCode, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}"/>

                  </Grid>
                </DataTemplate>
              </ItemsControl.ItemTemplate>
            </ItemsControl>

          </StackPanel>
        </GroupBox>

        <GroupBox Header="Household Info" HorizontalAlignment="Left" DataContext="{Binding Mode=OneTime, Path=Fields}" Padding="0,0,2,0">
          <WrapPanel>
            <WrapPanel.Resources>
              <Style TargetType="WrapPanel">
                <Setter Property="HorizontalAlignment" Value="Left" />
              </Style>

              <Style x:Key="StackField" TargetType="StackPanel">
                <Setter Property="Margin" Value="5,0,0,5" />
              </Style>

              <Style TargetType="TextBlock">
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="Margin" Value="0,0,3,0" />
              </Style>

              <Style TargetType="GroupBox" BasedOn="{StaticResource {x:Type GroupBox}}">
                <Setter Property="Padding" Value="2" />
                <Setter Property="HorizontalAlignment" Value="Left" />
              </Style>

              <Style x:Key="SmallGroup" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource {x:Type GroupBox}}">
                <Setter Property="HeaderTemplate">
                  <Setter.Value>
                    <DataTemplate>
                      <TextBlock Text="{TemplateBinding Content}" />
                    </DataTemplate>
                  </Setter.Value>
                </Setter>
              </Style>

            </WrapPanel.Resources>

            <!--local:ucDetailsView ItemsSource="{Binding Mode=OneWay, Path=Fields}" /-->

            <WrapPanel Orientation="Horizontal" Margin="0,3,3,3" MaxWidth="325">

              <StackPanel Style="{StaticResource StackField}" >
                <TextBlock Text="Duty Phone:" />
                <StackPanel Orientation="Horizontal" Name="pnlDutyPhone">
                  <TextBlock Text="DSN:" />
                  <TextBox Width="32" PreviewTextInput="NumericOnly_PreviewTextInput" 
                             Text="{Binding Mode=TwoWay, Path=DutyPhoneDSN1, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}"
                             MaxLength="{Binding Mode=OneTime, Path=Row.Table.Columns[DutyPhoneDSN1].MaxLength}" />
                  <TextBlock Text="-" />
                  <TextBox Width="40" PreviewTextInput="NumericOnly_PreviewTextInput"
                             Text="{Binding Mode=TwoWay, Path=DutyPhoneDSN2, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}"
                             MaxLength="{Binding Mode=OneTime, Path=Row.Table.Columns[DutyPhoneDSN2].MaxLength}" />
                </StackPanel>
              </StackPanel>

              <StackPanel Style="{StaticResource StackField}" Margin="10,0,0,0" >
                <TextBlock Text="Duty Location:" />
                <TextBox Width="150" Text="{Binding Mode=TwoWay, Path=DutyLocation, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}"
                           MaxLength="{Binding Mode=OneTime, Path=Row.Table.Columns[DutyLocation].MaxLength}" />
              </StackPanel>

              <StackPanel Style="{StaticResource StackField}">
                <TextBlock Text="Rank:" />
                <!-- nugget: List/ComboBox DisplayMemberPath & SelectedValuePath are simple field names on the ItemsSource...  SelectedValue is where to load/save the selected value and is typically a Binding to another datastucture -->
                <ComboBox Name="cbxRank" DisplayMemberPath="Rank" SelectedValuePath="Rank" SelectedValue="{Binding Mode=TwoWay, Path=Rank, ValidatesOnDataErrors=True}" />
              </StackPanel>

              <StackPanel Style="{StaticResource StackField}">
                <DockPanel >
                  <TextBlock Text="DEROS:" />
                  <Control Template="{StaticResource InfoIcon}" ToolTip="Should also be used to enforce TDY end dates" />
                </DockPanel>
                <DatePicker Width="115" SelectedDate="{Binding Mode=TwoWay, Path=DEROS, ValidatesOnDataErrors=True}" />
              </StackPanel>

              <StackPanel Style="{StaticResource StackField}" >
                <TextBlock Text="Primary Personal Phone:" />
                <StackPanel Orientation="Horizontal">
                  <TextBlock Text="(+" />
                  <TextBox Width="32" PreviewTextInput="NumericOnly_PreviewTextInput"
                             Text="{Binding Mode=TwoWay, Path=HomePhoneCountry, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}" 
                             MaxLength="{Binding Mode=OneTime, Path=Row.Table.Columns[HomePhoneCountry].MaxLength}" />
                  <TextBlock Text=")" />
                  <TextBox Width="95" PreviewTextInput="NumericOnly_PreviewTextInput"
                             Text="{Binding Mode=TwoWay, Path=HomePhone, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}"
                             MaxLength="{Binding Mode=OneTime, Path=Row.Table.Columns[HomePhone].MaxLength}" />
                </StackPanel>
              </StackPanel>

            </WrapPanel>

            <GroupBox Header="Official Mail Address" Style="{StaticResource SmallGroup}" Margin="0,0,0,3" >

              <WrapPanel Orientation="Vertical" Name="pnlOfficialMail">

                <global:ucTextBoxWatermarked Watermark="Line1: Not required, AG info, etc." Width="185"
                                             Text="{Binding Mode=TwoWay, Path=AddressLine1, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}"
                                             MaxLength="{Binding Mode=OneTime, Path=Row.Table.Columns[AddressLine1].MaxLength}" />
                <TextBox Style="{StaticResource ReadOnlyTextBox}" Text="{Binding Mode=OneWay, Path=AddressLine2}" 
                           Visibility="{Binding Converter={conv:NotEmptyToVisibleConverter}, Path=AddressLine2}" />
                <WrapPanel Orientation="Horizontal" Margin="0,3,0,0" >
                  <TextBlock Text="CMR"  Margin="5,0,3,0"/>
                  <TextBox Width="40" PreviewTextInput="NumericOnly_PreviewTextInput"
                             Text="{Binding Mode=TwoWay, Path=OfficialMailCMR, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}"
                             MaxLength="{Binding Mode=OneTime, Path=Row.Table.Columns[OfficialMailCMR].MaxLength}" />
                  <TextBlock Text="BOX" Margin="3,0,3,0" />
                  <TextBox Width="45" PreviewTextInput="NumericOnly_PreviewTextInput"
                             Text="{Binding Mode=TwoWay, Path=OfficialMailBox, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}"
                             MaxLength="{Binding Mode=OneTime, Path=Row.Table.Columns[OfficialMailBox].MaxLength}"/>
                </WrapPanel>

                <WrapPanel Orientation="Horizontal" Margin="0,3,0,0" >
                  <!-- nugget: binding to DataColumn.MaxLength -->
                  <TextBox Width="110" Text="{Binding Mode=TwoWay, Path=OfficialMailCity, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}"
                             MaxLength="{Binding Mode=OneTime, Path=Row.Table.Columns[OfficialMailCity].MaxLength}" />
                  <TextBox Width="30" Text="{Binding Mode=TwoWay, Path=OfficialMailState, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}"
                             MaxLength="{Binding Mode=OneTime, Path=Row.Table.Columns[OfficialMailState].MaxLength}" />
                  <TextBox Width="45" PreviewTextInput="NumericOnly_PreviewTextInput"
                             Text="{Binding Mode=TwoWay, Path=OfficialMailZip, ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}" 
                             MaxLength="{Binding Mode=OneTime, Path=Row.Table.Columns[OfficialMailZip].MaxLength}" />
                </WrapPanel>

              </WrapPanel>
            </GroupBox>

            <GroupBox Header="Host Nation Household Address" Style="{StaticResource SmallGroup}"  Margin="0,0,0,3" >
              <WrapPanel Orientation="Vertical">
                <TextBlock Text="(for determining utility vendor proximity, etc.)" />
                <WrapPanel Orientation="Horizontal" Margin="0,3,0,0" >
                  <TextBlock Text="Street:" />
                  <TextBox Width="110" Text="{Binding Mode=TwoWay, Path='HomeStreet', ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}"
                             MaxLength="{Binding Mode=OneTime, Path=Row.Table.Columns[HomeStreet].MaxLength}" />
                  <TextBlock Text="Number:" Width="50" TextAlignment="Right" />
                  <TextBox Width="47" PreviewTextInput="NumericOnly_PreviewTextInput"
                             Text="{Binding Mode=TwoWay, Path='HomeStreetNumber', ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}" 
                             MaxLength="{Binding Mode=OneTime, Path=Row.Table.Columns[HomeStreetNumber].MaxLength}" />
                </WrapPanel>

                <WrapPanel Orientation="Horizontal" Margin="0,3,0,0" >
                  <TextBlock Text="City:" Width="34" />
                  <TextBox Width="110" Text="{Binding Mode=TwoWay, Path='HomeCity', ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}"
                             MaxLength="{Binding Mode=OneTime, Path=Row.Table.Columns[HomeCity].MaxLength}" />
                  <TextBlock Text="Postal:" Width="50" TextAlignment="Right" />
                  <TextBox Width="47" PreviewTextInput="NumericOnly_PreviewTextInput"
                             Text="{Binding Mode=TwoWay, Path='HomePostal', ValidatesOnDataErrors=True, UpdateSourceTrigger=PropertyChanged}"
                             MaxLength="{Binding Mode=OneTime, Path=Row.Table.Columns[HomePostal].MaxLength}" />
                </WrapPanel>

              </WrapPanel>
            </GroupBox>

          </WrapPanel>
        </GroupBox>

      </DockPanel>

      <GridSplitter Name="splitterMatches" Grid.Column="1" Background="Transparent" Width="5" 
                      VerticalAlignment="Stretch" ResizeBehavior="PreviousAndNext" ResizeDirection="Columns"
                      Visibility="{Binding Mode=OneWay, ElementName=btnCart, Path=IsChecked, Converter={conv:BooleanToVisibilityConverter}}" />


      <GroupBox Header="Existing Customers" Grid.Column="2" Name="groupMatches" Visibility="Collapsed"
                  MaxHeight="{Binding Mode=OneWay, ElementName=SponsorInfoPanel, Path=ActualHeight}" >

        <DataGrid Name="gridMatches" AutoGenerateColumns="True" IsReadOnly="True" >

          <!-- nugget: DataGrid Grouping, taken from here: http://www.c-sharpcorner.com/UploadFile/dpatra/548/-->
          <!-- nugget: more WPF Binding Grouping: http://bea.stollnitz.com/blog/?p=17 -->
          <DataGrid.GroupStyle>
            <GroupStyle>

              <GroupStyle.Panel>
                <ItemsPanelTemplate>
                  <DataGridRowsPresenter />
                </ItemsPanelTemplate>
              </GroupStyle.Panel>

              <!-- make sure to also look at gridMatches.Items.GroupDescriptions.Add() logic in code behind to get the full picture of how this works -->
              <GroupStyle.ContainerStyle>
                <Style TargetType="GroupItem">
                  <Setter Property="Template">
                    <Setter.Value>
                      <ControlTemplate TargetType="GroupItem">
                        <StackPanel>
                          <!-- nugget: available group properties to bind to are on the "CollectionViewGroup" class: http://msdn.microsoft.com/en-us/library/system.windows.data.collectionviewgroup.aspx -->
                          <TextBlock Text="{Binding Mode=OneWay, Path=Name}"  FontSize="14" Margin="5,5,0,2" />
                          <ItemsPresenter />
                        </StackPanel>
                      </ControlTemplate>
                    </Setter.Value>
                  </Setter>
                </Style>
              </GroupStyle.ContainerStyle>

            </GroupStyle>
          </DataGrid.GroupStyle>

          <DataGrid.Columns>
            <DataGridTemplateColumn Header="Name" SortMemberPath="Name">
              <DataGridTemplateColumn.CellTemplate>
                <DataTemplate>
                  <TextBlock>
                      <Hyperlink Command="{x:Static local:RoutedCommands.OpenSponsor}" CommandParameter="{Binding Mode=OneTime, Path=SponsorGUID}" > <!-- Hyperlink bound to a RoutedCommand vs event handler and global delegates, very slick -->
                        <Run Text="{Binding Mode=OneTime, Path=Name}"/>
                      </Hyperlink>
                  </TextBlock>
                </DataTemplate>
              </DataGridTemplateColumn.CellTemplate>
            </DataGridTemplateColumn>
          </DataGrid.Columns>

        </DataGrid>
      </GroupBox>


      <GridSplitter Grid.Column="3" Background="Transparent" Width="5" VerticalAlignment="Stretch"
                        ResizeBehavior="PreviousAndNext" ResizeDirection="Columns"
                        Visibility="{Binding Mode=OneWay, ElementName=btnCart, Path=IsChecked, Converter={conv:BooleanToVisibilityConverter}}" />

      <!-- binding MaxHeight of this GroupBox to the ConstrainingStackPanel bundle of GroupBoxes to the left, to force the DataGrid to ScrollBar desirably rather than unconstrained expansion -->
      <GroupBox Grid.Column="4" Header="Transaction Review"
                  MaxHeight="{Binding Mode=OneWay, ElementName=SponsorInfoPanel, Path=ActualHeight}"
                  Visibility="{Binding Mode=OneWay, ElementName=btnCart, Path=IsChecked, Converter={conv:BooleanToVisibilityConverter}}">

        <global:ConstrainingStackPanel>
          <DataGrid GridLinesVisibility="None" HeadersVisibility="Column" FontFamily="Courier New" AutoGenerateColumns="False"
                    global:ConstrainingStackPanel.Constrain="True" Name="TransactionsDataGrid"
                    Background="#ededed" BorderBrush="Transparent" ItemsSource="{Binding Mode=OneWay, Path=Transactions}" >
            <DataGrid.Columns>
              <!-- the MaxWidth is a compromise from VS2010 design mode totally annoying insistance on not constraining the * width column -->
              <DataGridTemplateColumn Header="Pending" Width="auto">
                <DataGridTemplateColumn.CellTemplate>
                  <DataTemplate>
                    <Image Source="/Views/glyphs/pin_red_x24.png" Height="12" Visibility="{Binding Mode=OneWay, Path=Pending, Converter={conv:BooleanToVisibilityConverter}}" />
                  </DataTemplate>
                </DataGridTemplateColumn.CellTemplate>
              </DataGridTemplateColumn>
              <DataGridTextColumn Header="Description" Binding="{Binding Mode=OneWay, Path=Description}" Width="*" MaxWidth="900" />
              <!--DataGridTextColumn Header="Qty" Binding="{Binding Mode=OneWay, Path=Qty}" Width="auto">
                <DataGridTextColumn.ElementStyle>
                  <Style TargetType="TextBlock">
                    <Setter Property="TextAlignment" Value="Right" />
                  </Style>
                </DataGridTextColumn.ElementStyle>
              </DataGridTextColumn-->
              <DataGridTextColumn Header="Price" Binding="{Binding Mode=OneWay, Path=Price, StringFormat={}{0:c}}" Width="auto" />
            </DataGrid.Columns>
          </DataGrid>
          <TextBlock FontFamily="Courier New" Text="====================" HorizontalAlignment="Right" />
          <StackPanel Grid.Row="1" Orientation="Horizontal" Margin="0 0 7 0" HorizontalAlignment="Right">
            <TextBlock FontFamily="Courier New" Text="Total: " />
            <TextBlock FontFamily="Courier New" Text="{Binding Mode=OneWay, Path=Transactions.TotalPrice, StringFormat={}{0:c}}" FontWeight="Bold" />
          </StackPanel>
        </global:ConstrainingStackPanel>
      </GroupBox>
    </Grid>

    <Grid Grid.Row="2" >
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="2*" />
        <ColumnDefinition Width="auto" />
        <ColumnDefinition Width="1*" Name="DiaryColumn" />
      </Grid.ColumnDefinitions>

      <TabControl Grid.Column="0" >
        <TabItem>
          <TabItem.Header>
            <TextBlock Text="Tax Forms" FontSize="16"/>
          </TabItem.Header>
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition />
              <ColumnDefinition Width="auto" />
            </Grid.ColumnDefinitions>
            <!-- nugget: Grid generally has the best default "content stretching" behavior and WrapPanels generally preferred over StackPanel because StackPanel doesn't "constrain" content resulting in overflow clipping -->
            <Grid.RowDefinitions>
              <RowDefinition Height="auto" />
              <!-- nugget: Grid Row/ColumnDefinitions -> Width/Height="auto" means snap to minimal size of content, otherwise blank means stretch contents to boundary (handy!) -->
              <RowDefinition />
            </Grid.RowDefinitions>

            <WrapPanel Orientation="Horizontal" >
              <WrapPanel.Resources>
                <Style TargetType="RadioButton">
                  <Setter Property="VerticalAlignment" Value="Center" />
                  <Setter Property="Margin" Value="5 0" />
                </Style>
              </WrapPanel.Resources>

              <Button Click="btnNewNF1Package_Click" Name="btnNewNF1Package"
                      IsEnabled="{Binding Mode=OneWay, Path=Class1TaxForms_CountRemainingToBuy, 
                                  Converter={conv:BoolExpressionToBool}, ConverterParameter='? > 0' }">
                <Button.ToolTip>
                  <MultiBinding Converter="{local:Class1SellButtonToolTipConverter}">
                    <Binding Mode="OneWay" Path="IsHouseholdActive" />
                    <Binding Mode="OneWay" Path="Class1TaxForms_CountRemainingToBuy" />
                  </MultiBinding>
                </Button.ToolTip>

                <StackPanel Orientation="Horizontal">
                  <Image Source="/Views/glyphs/documents_new.png" />
                  <Label Content="E/NF1" />
                </StackPanel>
              </Button>

              <Button Name="btnNewNF2" Content="E/NF2" Click="btnNewNF1Package_Click" Margin="0 0 15 0" Height="{Binding ElementName=btnNewNF1Package, Path=ActualHeight}" 
                      IsEnabled="{Binding Mode=OneWay, Path=Class2Unreturned, Converter={conv:InverseBooleanConverter}}">
                <Button.ToolTip>
                  <MultiBinding Converter="{local:Class2SellButtonToolTipConverter}">
                    <Binding Mode="OneWay" Path="IsHouseholdActive" />
                    <Binding Mode="OneWay" Path="Class2Unreturned" />
                  </MultiBinding>
                </Button.ToolTip>
              </Button>

              <Popup Name="popPrintNF1s" AllowsTransparency="True"
                     PlacementTarget="{Binding ElementName=btnNewNF1Package}" Placement="Bottom" VerticalOffset="5" >
                <Border BorderThickness="1" BorderBrush="DarkGray" Background="{StaticResource PopUpBackgroundBrush}" Padding="15" CornerRadius="10">
                  <StackPanel Orientation="Horizontal" VerticalAlignment="Center" >
                    <Image Source="/Views/glyphs/48px-Commons-emblem-question.svg.png" Margin="0 0 15 0" Name="imgNewFormsCount" />
                    <StackPanel Orientation="Vertical">

                      <StackPanel Orientation="Horizontal" >
                        <TextBlock Text="Form Type:  " />
                        <RadioButton GroupName="FormType" Name="rdoNF1" Content="NF1" IsChecked="True" />
                        <RadioButton GroupName="FormType" Name="rdoEF1" Content="EF1" Margin="10 0 0 0" />
                      </StackPanel>

                      <StackPanel Orientation="Horizontal" Margin="0 5 0 0">
                        <TextBlock Text="Number of New Forms: " VerticalAlignment="Center" />
                        <ComboBox Name="cbxNewFormsCount" />
                      </StackPanel>

                      <StackPanel Margin="0 5 0 0" Orientation="Vertical" Visibility="{Binding Mode=OneWay, ElementName=lbxPrintDependents, Path=Items.Count, Converter={conv:BoolExpressionToVisibility}, ConverterParameter='? > 0'}">
                        <TextBlock Margin="0 5 0 0" HorizontalAlignment="Left">
                          Print Dependents on Forms:<LineBreak />(CTRL + Left Mouse Button to UN-select)
                        </TextBlock>
                        <ListBox Name="lbxPrintDependents" Style="{StaticResource RadioButtonList}"
                                 HorizontalAlignment="Left" Padding="2 2 3 2" Margin="0 2" BorderThickness="0"
                                 ItemsSource="{Binding Mode=OneWay, Path=DependentsSelectionList}"
                                 DisplayMemberPath="FirstName" SelectedValuePath="RowGUID"
                                 SelectionMode="Single" />
                      </StackPanel>

                      <StackPanel Orientation="Horizontal" Margin="0 5 0 0">
                        <Button Name="btnReadyToPrint_Yes" Content="_Print Immediately" FontSize="14" IsDefault="True" Click="btnReadyToPrint_Click" Padding="5 3" />
                        <Button Content="_Cancel" FontSize="14" IsCancel="True" Margin="5" Click="btnReadyToPrint_No_Click" Padding="5 3" />
                        <Button Name="btnReadyToPrint_Cart" Content="_Add to Cart" FontSize="14" Click="btnReadyToPrint_Click" Padding="5 3" />
                      </StackPanel>

                    </StackPanel>
                  </StackPanel>
                </Border>
              </Popup>

              <StackPanel VerticalAlignment="Center">
                <RadioButton Grid.Column="0" Grid.Row="0" GroupName="rdogrpTaxFormsListFilter" Content="Show All" />
                <RadioButton Grid.Column="1" Grid.Row="0" Name="rdoShowUnPrintedTaxFormsOnly" GroupName="rdogrpTaxFormsListFilter" Content="Not Printed" IsChecked="{Binding Mode=TwoWay, Path=TaxForms_UnPrintedOnlyFilter}"   />
              </StackPanel>
              <Border Style="{StaticResource FatLabel}" >
                <RadioButton Name="rdoHideReturnedTaxForms" GroupName="rdogrpTaxFormsListFilter"
                             
                             IsChecked="{Binding Mode=TwoWay, Path=TaxForms_UnReturnedOnlyFilter}">
                  <StackPanel Orientation="Horizontal">
                    <TextBlock Text="Unreturned:" Margin="0 0 3 0" />
                    <TextBlock Text="{Binding Mode=OneWay, Path=Class1TaxForms_CountUnreturned}" FontWeight="Bold" />
                  </StackPanel>
                </RadioButton>
              </Border>
              <Border Style="{StaticResource FatLabel}" Name="ReturnedNotFiledLabel"
                      MouseLeftButtonUp="ReturnedNotFiledLabel_MouseLeftButtonUp">
                <RadioButton Name="rdoShowReturnedNotFiledTaxFormsOnly" GroupName="rdogrpTaxFormsListFilter"
                             IsChecked="{Binding Mode=TwoWay, Path=TaxForms_ReturnedNotFiledOnlyFilter}">
                  <StackPanel Orientation="Horizontal">
                    <TextBlock Text="Returned Not Filed:" Margin="0 0 3 0" />
                    <TextBlock Text="{Binding Mode=OneWay, Path=TaxForms_CountReturnedNotFiled}" FontWeight="Bold"/>
                  </StackPanel>
                </RadioButton>
              </Border>

            </WrapPanel>

            <TextBlock Grid.Column="1" Margin="5 2" Text="{Binding Mode=OneWay, ElementName=gridForms, Path=Items.Count, StringFormat='{}{0} form(s)'}" VerticalAlignment="Bottom"  />

            <DataGrid Grid.Row="1" Name="gridForms" IsReadOnly="True" HeadersVisibility="Column" Grid.ColumnSpan="2"
                        ItemsSource="{Binding Mode=OneWay, Path=TaxForms}" AutoGenerateColumns="true" >

              <DataGrid.Resources>
                <!-- nugget: colorizing individual cell elements based on underlying data field values -->
                <Style TargetType="{x:Type DataGridCell}" BasedOn="{StaticResource PrettyDataGridCellStyle}">
                  <Style.Triggers>
                    <DataTrigger Value="True">
                      <DataTrigger.Binding>
                        <!-- hightlight row if Form is Incomplete and currently sitting in the Office to prompt clerk to hand back to Customer for resolution -->
                        <MultiBinding Mode="OneWay" Converter="{conv:AND}" >
                          <Binding Mode="OneWay" Path="Location" Converter="{conv:BoolExpressionToBool}" ConverterParameter="'?' != 'LOST' &amp;&amp; '?' != 'CUST'" />
                          <Binding Mode="OneWay" Path="IncompleteId" />
                        </MultiBinding>
                      </DataTrigger.Binding>
                      <Setter Property="Background" Value="LightPink" />
                    </DataTrigger>
                  </Style.Triggers>
                </Style>
              </DataGrid.Resources>

            </DataGrid>
          </Grid>
        </TabItem>

        <TabItem >
          <TabItem.Header>
            <TextBlock Text="    UTAP    " FontSize="16" />
          </TabItem.Header>
          <local:ucDetailsView Padding="0 20 0 0" ItemsSource="{Binding Mode=OneWay, Path=UTAPFields}" Orientation="Vertical" LabelOrientation="Horizontal"/>
        </TabItem>

      </TabControl>

      <GridSplitter Grid.Column="1" Width="5" Height="auto" ResizeBehavior="PreviousAndNext" Background="Transparent" />

      <DockPanel Grid.Column="2" Name="pnlDiary" >
        <GroupBox Header="Alerts" DockPanel.Dock="Top" >
          <Grid>
            <Grid.RowDefinitions>
              <RowDefinition />
              <RowDefinition />
            </Grid.RowDefinitions>
            <WrapPanel>
              <DockPanel Name="dockSuspension" HorizontalAlignment="Left" Margin="0,0,5,5">
                <DockPanel.IsEnabled>
                  <MultiBinding Converter="{conv:OR}">
                    <Binding Mode="OneWay" Source="{x:Static local:User.Current}" Path="Access.IsAdmin" />
                    <Binding Mode="OneWay" Converter="{local:SuspensionIsEnabled}" />
                  </MultiBinding>
                </DockPanel.IsEnabled>
                <ToggleButton DockPanel.Dock="Left" Name="btnSuspend" Margin="0" Padding="4 3 4 4" VerticalAlignment="Top" Content="Suspend"
                              Checked="btnSuspend_Checked"
                              IsChecked="{Binding Mode=OneWay, Path=Fields[SuspensionExpiry], Converter={conv:NotEmptyToBool}}"
                              Style="{StaticResource DistractingToggleButton}">
                  <ToggleButton.ToolTip>
                    <ToolTip Content="As a precaution, Suspension can only be removed by Suspending office."
                             Visibility="{Binding Mode=OneWay, ElementName=dockSuspension, Path=IsEnabled, Converter={conv:BooleanToVisibilityConverter}, ConverterParameter=Inverse}"/>
                  </ToggleButton.ToolTip>
                </ToggleButton>
                <local:ReasonPopup x:Name="SuspensionReasonPopup"  Result="SuspensionReasonPopup_Result"
                                   PlacementTarget="{Binding ElementName=dockSuspension}" />
                <WrapPanel Orientation="Vertical" Margin="5 0 0 0"
                           Visibility="{Binding Mode=OneWay, ElementName=btnSuspend, Path=IsChecked, Converter={conv:BooleanToVisibilityConverter}}">
                  <WrapPanel Orientation="Horizontal">
                    <TextBlock VerticalAlignment="Center" Text="Until: " />
                    <DatePicker VerticalAlignment="Bottom" SelectedDate="{Binding Mode=TwoWay, Path=Fields[SuspensionExpiry]}" />
                    <Button Content="1mo" Tag="OneMonth" Click="btnSuspendDuration_Click" />
                    <Button Content="1yr" Tag="OneYear" Click="btnSuspendDuration_Click" />
                    <Button Content="*" Tag="Forever" Click="btnSuspendDuration_Click" ToolTip="Forever" />
                  </WrapPanel>
                  <TextBlock VerticalAlignment="Center">
                    <TextBlock.Text>
                      <Binding StringFormat=" by: {0}" Path="Fields[SuspensionTaxOffice]" />
                    </TextBlock.Text>
                  </TextBlock>
                </WrapPanel>
              </DockPanel>
              
              <ToggleButton Content="PCS" Padding="4,3,4,4" VerticalAlignment="Top"
                            IsChecked="{Binding Mode=TwoWay, Path=IsPCS}"
                            Style="{StaticResource DistractingToggleButton}" />
              
            </WrapPanel>
            <TextBlock Name="lblViolationInfo" Grid.Row="1" 
                       Visibility="{Binding Mode=OneWay, ElementName=lblViolationInfo, Path=Text, Converter={conv:NotEmptyToVisibleConverter}}">
              <TextBlock.Text>
                <MultiBinding Mode="OneWay" StringFormat="Total Violations: {0}, Last 3 Yrs: {1}, Unresolved: {2}">
                  <Binding Mode="OneWay" Path="Fields[ViolationCountTotal]" /> 
                  <Binding Mode="OneWay" Path="Fields[ViolationCountInLast3Years]" />
                  <Binding Mode="OneWay" Path="Fields[ViolationCountUnresolved]" />
                </MultiBinding>
              </TextBlock.Text>
            </TextBlock>
          </Grid>
        </GroupBox>

        <GroupBox Style="{x:Null}">
          <GroupBox.Header>
            <StackPanel Orientation="Horizontal">
              <TextBlock Text="Diary" VerticalAlignment="Center" Margin="0,0,5,0" FontSize="16" />
              <Button Content="Add Entry" Padding="3 2" Margin="3" Click="btnDiaryAdd_Click" Name="btnDiaryAdd"  />
            </StackPanel>
          </GroupBox.Header>
          <DockPanel>
            <WrapPanel DockPanel.Dock="Top" Orientation="Horizontal">
              <Popup Name="popDiaryAdd" AllowsTransparency="True" 
                     PlacementTarget="{Binding ElementName=btnDiaryAdd}" Placement="Bottom" VerticalOffset="5" >
                <Border BorderThickness="1" BorderBrush="DarkGray" Background="{StaticResource PopUpBackgroundBrush}" Padding="7" CornerRadius="10">
                  <StackPanel Orientation="Vertical">
                    <StackPanel Orientation="Horizontal">
                      <CheckBox Content="Alert" Margin="0 0 5 0" VerticalAlignment="Center" />
                      <TextBox Name="txtDiaryAdd" TextWrapping="Wrap" VerticalScrollBarVisibility="Visible" AcceptsReturn="True" Height="36" Width="250" />
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Margin="5">
                      <Button Content="_OK" IsDefault="True" Margin="0 0 2 0" Width="47" Click="btnDiaryAdd_OK_Click" />
                      <Button Content="_Cancel" IsCancel="True" Margin="2 0 0 0" Width="47" />
                    </StackPanel>
                  </StackPanel>
                </Border>
              </Popup>
            </WrapPanel>
            <DataGrid Name="gridRemarks" Grid.Row="1" AutoGenerateColumns="True" ItemsSource="{Binding Mode=OneWay, Path=SponsorRemarks}" 
                      HeadersVisibility="Column" IsReadOnly="True" >
              <DataGrid.Columns>
                <DataGridTemplateColumn>
                  <DataGridTemplateColumn.CellTemplate>
                    <DataTemplate>
                      <Button FontFamily="Marlett" Content="r" ToolTip="Remove" Click="btnRemoveRemark_Click" Padding="0" Opacity="0">
                        <Button.Triggers>
                          <EventTrigger RoutedEvent="Mouse.MouseEnter">
                            <BeginStoryboard>
                              <Storyboard Storyboard.TargetProperty="Opacity">
                                <StaticResourceExtension ResourceKey="UnDimOpacityAnim"/>
                              </Storyboard>
                            </BeginStoryboard>
                          </EventTrigger>
                          <EventTrigger RoutedEvent="Mouse.MouseLeave">
                            <BeginStoryboard>
                              <Storyboard Storyboard.TargetProperty="Opacity">
                                <!-- nugget: the crazy unintuitive syntax to reuse an Animation as a StaticResource: http://social.msdn.microsoft.com/Forums/en-US/wpf/thread/9e769c38-3898-4cb3-88ca-b506f3b4fa36/-->
                                <StaticResourceExtension ResourceKey="DimOpacityAnim"/>
                              </Storyboard>
                            </BeginStoryboard>
                          </EventTrigger>
                        </Button.Triggers>
                      </Button>
                    </DataTemplate>
                  </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
              </DataGrid.Columns>
            </DataGrid>


          </DockPanel>
        </GroupBox>
      </DockPanel>
    </Grid>

  </Grid>

</local:tabBusinessBase>
